/* The following code was generated by JFlex 1.4.1 on 8/11/22, 8:01 AM */

/*
 * Generated on 8/11/22, 8:01 AM
 */
package edu.uiuc.ncsa.qdl.gui.flex;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * QDL
TokenMaker class generated by TokenMakerMaker utility 08/09/2022
By Jeff Gaynor
 */

public class QDLSyntax extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\73\1\15"+
    "\1\17\1\1\1\41\1\37\1\7\2\40\1\22\1\25\1\35\1\25"+
    "\1\23\1\21\1\4\3\4\1\66\1\6\1\65\1\6\2\3\1\45"+
    "\1\35\1\75\1\74\1\75\1\35\1\17\1\5\1\54\1\5\1\55"+
    "\2\5\2\1\1\56\2\1\1\60\1\1\1\61\4\1\1\62\7\1"+
    "\1\76\1\11\1\36\1\100\1\2\1\0\1\31\1\14\1\52\1\50"+
    "\1\24\1\30\1\57\1\42\1\44\1\70\1\64\1\32\1\53\1\13"+
    "\1\47\1\43\1\72\1\27\1\33\1\26\1\12\1\71\1\46\1\63"+
    "\1\51\1\67\1\34\1\77\1\34\1\41\55\0\1\101\2\0\1\101"+
    "\47\0\1\101\37\0\1\101\u1f82\0\1\101\u0117\0\1\101\163\0\1\101"+
    "\1\0\1\101\1\101\35\0\1\101\1\101\1\101\1\101\35\0\1\101"+
    "\13\0\1\101\1\101\12\0\1\101\1\101\2\0\1\101\1\101\61\0"+
    "\1\101\12\0\1\101\5\0\1\101\137\0\1\101\1\0\1\101\u04db\0"+
    "\1\101\1\101\ud818\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\1\7\1\10\1\5\10\1\1\11\25\1\1\5"+
    "\1\11\1\1\1\12\1\13\5\12\1\14\3\12\1\0"+
    "\1\15\1\0\1\15\1\3\1\16\1\0\1\3\5\1"+
    "\2\7\1\17\1\20\1\21\1\22\24\1\1\6\15\1"+
    "\1\23\35\1\1\24\11\0\1\22\1\0\1\3\1\25"+
    "\2\3\1\16\1\3\6\1\1\7\1\26\1\7\3\1"+
    "\1\6\4\1\1\6\26\1\1\6\40\1\1\6\5\1"+
    "\1\27\6\1\11\0\1\3\3\1\1\7\4\1\1\30"+
    "\77\1\2\0\1\31\2\0\1\32\1\0\1\3\1\1"+
    "\1\7\71\1\5\0\1\3\1\1\1\7\7\1\1\6"+
    "\13\1\1\6\14\1\1\23\70\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\306"+
    "\0\306\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\306"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0672\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\306\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\306"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u035a\0\u0e2e\0\u0e70"+
    "\0\306\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\306\0\306\0\306\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\u0108\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986"+
    "\0\u0108\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74"+
    "\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\306\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352"+
    "\0\u2394\0\u23d6\0\u2418\0\306\0\u245a\0\u249c\0\u0eb2\0\u24de"+
    "\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac\0\306"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc"+
    "\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc"+
    "\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc"+
    "\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec"+
    "\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c"+
    "\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c"+
    "\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c"+
    "\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u0108"+
    "\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a"+
    "\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a"+
    "\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a"+
    "\0\u0108\0\u3f6c\0\u3fae\0\u3ff0\0\u4032\0\u4074\0\u40b6\0\u40f8"+
    "\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284\0\u42c6\0\u4308"+
    "\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\u4494\0\u44d6\0\u4518"+
    "\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662\0\u46a4\0\u46e6\0\u4728"+
    "\0\u476a\0\u47ac\0\u47ee\0\u4830\0\u4872\0\u48b4\0\u48f6\0\u4938"+
    "\0\u497a\0\u49bc\0\u49fe\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48"+
    "\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58"+
    "\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2\0\u4ee4\0\u4f26\0\u4f68"+
    "\0\u4faa\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178"+
    "\0\u51ba\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u5304\0\u5346\0\u5388"+
    "\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598"+
    "\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8"+
    "\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8"+
    "\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8"+
    "\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8"+
    "\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8"+
    "\0\u602a\0\u606c\0\u60ae\0\u60f0\0\u502e\0\u6132\0\u50f4\0\u6174"+
    "\0\u61b6\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384"+
    "\0\u63c6\0\u6408\0\u644a\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594"+
    "\0\u65d6\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4"+
    "\0\u67e6\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6762\0\u6972"+
    "\0\u69b4\0\u69f6\0\u6a38\0\u6a7a\0\u6abc\0\u6afe\0\u6b40\0\u6b82"+
    "\0\u6bc4\0\u6c06\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u2940\0\u6d50"+
    "\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60"+
    "\0\u6fa2\0\u6fe4\0\u7026\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170"+
    "\0\u71b2\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc\0\u733e\0\u7380"+
    "\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca\0\u750c\0\u754e\0\u7590"+
    "\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da\0\u771c\0\u775e\0\u77a0"+
    "\0\u77e2\0\u7824\0\u7866\0\u78a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\4\1\11\1\16\1\17"+
    "\1\11\1\20\1\21\1\11\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\4\1\30\1\31\1\30\1\11"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\5"+
    "\1\41\1\42\1\43\1\44\1\45\1\5\1\46\1\47"+
    "\1\50\1\5\1\51\2\6\1\5\1\52\1\53\1\54"+
    "\1\35\1\55\1\56\1\57\1\60\1\4\1\11\10\61"+
    "\1\62\11\61\1\63\5\61\1\64\11\61\1\65\3\61"+
    "\1\66\33\61\10\67\1\70\17\67\1\71\11\67\1\72"+
    "\3\67\1\73\33\67\103\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\7\0\3\75\2\6\1\75\1\6\2\0\4\75\2\0"+
    "\1\75\3\0\1\76\1\77\1\0\6\75\6\0\3\75"+
    "\1\0\17\75\2\6\4\75\6\0\1\75\7\100\1\101"+
    "\1\102\1\103\70\100\1\0\6\5\2\0\1\74\1\5"+
    "\1\104\1\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\1\105\2\5"+
    "\7\0\1\5\1\0\1\5\1\106\4\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\5\1\107\4\5\6\0\3\5\1\0"+
    "\1\5\1\110\23\5\7\0\10\15\1\111\1\112\3\15"+
    "\1\113\64\15\20\0\1\16\72\0\1\11\7\0\1\114"+
    "\1\115\62\0\2\116\1\0\1\116\56\0\2\116\14\0"+
    "\6\5\2\0\1\74\1\5\1\117\1\5\7\0\1\5"+
    "\1\0\4\5\1\120\1\5\6\0\3\5\1\0\15\5"+
    "\1\121\7\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\5\1\122\1\5\1\123\2\5\6\0"+
    "\1\124\2\5\1\0\1\5\1\125\23\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\126\1\0\3\5\1\127"+
    "\2\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\130\1\5"+
    "\1\131\1\132\1\5\6\0\2\5\1\133\1\0\1\5"+
    "\1\134\23\5\10\0\6\5\2\0\1\74\2\5\1\135"+
    "\7\0\1\5\1\0\1\136\4\5\1\137\6\0\1\5"+
    "\1\140\1\5\1\0\4\5\1\141\10\5\1\142\7\5"+
    "\10\0\6\5\2\0\1\74\1\5\1\143\1\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\144\1\0\1\5"+
    "\1\145\23\5\10\0\6\5\2\0\1\74\1\146\2\5"+
    "\7\0\1\147\1\0\1\150\2\5\1\151\2\5\6\0"+
    "\1\152\1\5\1\153\1\0\4\5\1\154\20\5\46\0"+
    "\1\11\43\0\6\5\2\0\1\74\3\5\7\0\1\155"+
    "\1\0\3\5\1\156\2\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\5\1\157\4\5\6\0\2\5\1\143\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\1\5\1\160\1\5\7\0"+
    "\1\5\1\0\2\5\1\161\2\5\1\162\6\0\3\5"+
    "\1\0\2\5\1\163\22\5\103\0\1\11\6\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\5\5\1\164"+
    "\6\0\1\165\2\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\5\5\1\166\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\167\1\0\3\5\1\170\2\5\6\0\2\5"+
    "\1\171\1\0\1\5\1\161\23\5\10\0\6\5\2\0"+
    "\1\74\2\5\1\172\7\0\1\173\1\0\3\5\1\174"+
    "\2\5\6\0\1\175\2\5\1\0\1\5\1\176\23\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\3\5\1\177\2\5\6\0\3\5\1\0\1\5\1\200"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\1\5\1\201\23\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\202\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\1\5\1\203\1\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\204"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\1\205\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\206\1\0"+
    "\1\207\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\210\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\211\23\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\212\1\0\2\5\1\213\1\214\2\5\6\0\3\5"+
    "\1\0\2\5\1\215\22\5\10\0\6\5\2\0\1\74"+
    "\1\216\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\54\0\1\11\133\0\1\11\40\0\1\11"+
    "\40\0\2\11\1\0\10\61\1\0\11\61\1\0\5\61"+
    "\1\0\11\61\1\0\3\61\1\0\33\61\21\0\1\217"+
    "\106\0\1\220\15\0\1\221\63\0\1\222\121\0\1\223"+
    "\33\0\10\67\1\0\17\67\1\0\11\67\1\0\3\67"+
    "\1\0\33\67\26\0\1\224\15\0\1\225\63\0\1\226"+
    "\121\0\1\227\45\0\1\230\67\0\7\75\2\0\4\75"+
    "\2\0\1\75\4\0\1\75\1\0\6\75\6\0\3\75"+
    "\1\0\25\75\6\0\4\75\2\231\1\75\1\231\2\0"+
    "\4\75\2\0\1\75\4\0\1\75\1\232\6\75\6\0"+
    "\3\75\1\0\17\75\2\231\4\75\6\0\1\75\7\233"+
    "\1\234\1\0\71\233\7\0\1\234\72\0\4\233\1\235"+
    "\1\233\1\236\1\237\1\0\1\100\1\240\3\100\10\233"+
    "\3\100\34\233\2\236\13\233\1\0\6\5\2\0\1\74"+
    "\2\5\1\241\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\242\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\5\5"+
    "\1\243\17\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\244"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\245"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\2\5\1\246\12\5\1\143\7\5\7\0"+
    "\11\111\1\247\3\111\1\250\70\111\1\15\1\111\2\15"+
    "\1\0\1\15\1\251\3\15\10\111\3\15\34\111\2\15"+
    "\13\111\3\75\2\116\1\75\1\116\2\0\4\75\2\0"+
    "\1\75\4\0\1\77\1\0\6\75\6\0\3\75\1\0"+
    "\17\75\2\116\4\75\6\0\1\75\1\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\4\5\1\252\20\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\5\5\1\253\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\254\1\0\6\5\6\0\1\5\1\255\1\5\1\0"+
    "\4\5\1\256\20\5\10\0\6\5\2\0\1\74\1\257"+
    "\2\5\7\0\1\5\1\0\3\5\1\260\2\5\6\0"+
    "\2\5\1\261\1\0\3\5\1\161\21\5\10\0\6\5"+
    "\2\0\1\74\1\5\1\262\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\263\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\264\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\1\5\1\265\4\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\16\5\1\266\6\5\10\0\6\5\2\0\1\74"+
    "\1\5\1\267\1\5\7\0\1\5\1\0\1\270\5\5"+
    "\6\0\1\5\1\271\1\5\1\0\2\5\1\272\2\5"+
    "\1\273\15\5\1\274\1\5\10\0\6\5\2\0\1\74"+
    "\1\5\1\275\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\276\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\277\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\4\5\1\300\1\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\301"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\302\1\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\5\1\303\4\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\5\5"+
    "\1\143\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\3\5\1\304\2\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\5\5\1\305\6\0\2\5"+
    "\1\304\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\1\5\1\306\1\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\307"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\135\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\5\5"+
    "\1\310\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\11\5\1\311\13\5\10\0\6\5\2\0\1\74"+
    "\2\5\1\312\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\313\5\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\3\5\1\314\2\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\3\5\1\143\21\5\10\0\6\5"+
    "\2\0\1\74\1\315\2\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\1\5\1\262\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\21\5\1\316\3\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\317\1\5"+
    "\1\320\2\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\3\5\1\321"+
    "\2\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\4\5\1\322\1\323"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\324"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\2\5\1\325\2\5\1\326\6\0\1\5"+
    "\1\327\1\5\1\0\2\5\1\330\1\5\1\256\20\5"+
    "\10\0\1\5\1\331\4\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\332\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\1\5\1\333\4\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\2\5\1\334\1\0"+
    "\25\5\10\0\1\5\1\335\4\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\2\5\1\336\7\0\1\5"+
    "\1\0\1\337\1\5\1\340\3\5\6\0\3\5\1\0"+
    "\4\5\1\252\20\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\1\341\5\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\1\5\1\143\1\342\3\5\6\0\3\5\1\0"+
    "\5\5\1\143\17\5\10\0\1\5\1\343\4\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\344\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\345\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\346\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\1\5"+
    "\1\347\1\5\7\0\1\5\1\0\5\5\1\262\6\0"+
    "\3\5\1\0\5\5\1\350\17\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\5\5\1\351\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\2\5"+
    "\1\352\22\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\353"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\4\5\1\354\20\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\355\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\5\5\1\206"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\4\5\1\356\1\5\6\0"+
    "\3\5\1\0\5\5\1\357\17\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\360\5\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\361\1\0\1\5\1\362\4\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\3\5\1\135"+
    "\21\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\320\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\1\5\1\363\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\5\5\1\364"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\1\5\1\365\4\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\363\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\366\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\52\0\1\367\70\0"+
    "\1\370\75\0\1\371\121\0\1\372\76\0\1\373\70\0"+
    "\1\374\75\0\1\375\121\0\1\376\36\0\4\377\5\0"+
    "\1\377\7\0\1\377\3\0\2\377\16\0\1\377\1\0"+
    "\1\377\1\0\2\377\7\0\2\377\13\0\3\75\2\231"+
    "\1\75\1\231\2\0\4\75\2\0\1\75\4\0\1\75"+
    "\1\0\6\75\6\0\3\75\1\0\17\75\2\231\4\75"+
    "\6\0\1\75\3\0\2\231\1\0\1\231\56\0\2\231"+
    "\13\0\7\233\1\101\1\0\75\233\1\236\1\233\1\236"+
    "\1\234\1\0\54\233\2\236\17\233\1\100\1\233\1\100"+
    "\1\234\1\0\54\233\2\100\16\233\4\u0100\1\101\1\0"+
    "\3\233\1\u0100\7\233\1\u0100\3\233\2\u0100\16\233\1\u0100"+
    "\1\233\1\u0100\1\233\2\u0100\7\233\2\u0100\13\233\1\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u0101\23\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\1\5\1\320\22\5\1\u0102\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\u0103\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\322\23\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\3\5\1\351\2\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\3\5\1\161\21\5"+
    "\7\0\10\111\1\0\74\111\4\u0104\2\111\1\247\2\111"+
    "\1\u0104\1\250\6\111\1\u0104\3\111\2\u0104\16\111\1\u0104"+
    "\1\111\1\u0104\1\111\2\u0104\7\111\2\u0104\13\111\1\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u0105\23\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\161\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\4\5"+
    "\1\u0106\20\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\3\5\1\u0107\2\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\u0108\1\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\u0109\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\1\5\1\u010a\1\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\5\5\1\143\17\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\1\143\2\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\143\1\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\1\5\1\161\1\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\1\u010b\1\u010c\1\u010d\7\0\1\5"+
    "\1\0\4\5\1\u010e\1\u010f\6\0\1\u0110\2\5\1\0"+
    "\22\5\1\u0111\2\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u0112\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\3\5\1\u0113\2\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\1\u0114\2\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\4\5\1\u0115\1\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\1\u0116\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\3\5\1\u0117\2\5\6\0\3\5\1\0"+
    "\1\5\1\u0118\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u0119\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\2\5\1\u011a\13\5\1\143"+
    "\6\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\5\5\1\u011b\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\5\5\1\u011c\17\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\5\5\1\257"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\u011d\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u011e\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\1\5\1\u011f\4\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\1\5\1\262\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\u0120\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u0107\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\5\5\1\262\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\1\u0121\5\5"+
    "\6\0\3\5\1\0\25\5\10\0\1\5\1\u0122\4\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\5\5\1\u010f\6\0\3\5\1\0"+
    "\25\5\10\0\1\5\1\u0123\4\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\5\1\u0124\4\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\2\5"+
    "\1\u0125\3\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\143\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\2\5\1\u0126\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\1\5\1\143\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\2\5\1\143\22\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\143"+
    "\5\5\6\0\3\5\1\0\25\5\10\0\1\5\1\u0127"+
    "\4\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\1\143\2\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\1\5\1\322\1\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\143\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u0128\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\1\u0129\2\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\u012a\1\0\6\5\6\0"+
    "\2\5\1\u012b\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\2\5\1\u012c\1\5\1\u012d"+
    "\1\5\6\0\3\5\1\0\2\5\1\u012e\22\5\10\0"+
    "\6\5\2\0\1\74\1\5\1\u012f\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\5\5\1\u0130\17\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\4\5\1\253\1\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\u0131\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\1\u0132\2\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u0133\23\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\u0134\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\u0135\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\2\5\1\u0136\3\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\u0137\1\0"+
    "\1\5\1\u0138\4\5\6\0\3\5\1\0\1\u0139\24\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\4\5\1\u013a\1\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\4\5\1\u013b\20\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\4\5\1\u013c\20\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\u013d\4\5\1\u013e"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\5\5\1\u013f\17\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\16\5"+
    "\1\143\6\5\10\0\6\5\2\0\1\74\1\u0140\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\4\5\1\u0141\1\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\u0142\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\u0143\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\4\5\1\360\1\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\2\5\1\u0144\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\5\5\1\360\17\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\u0145\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\4\5\1\u0146\20\5\10\0\1\5\1\u0147\4\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\1\5\1\u0148\4\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\1\5\1\151\4\5\6\0\3\5\1\0\25\5"+
    "\54\0\1\u0149\60\0\1\367\120\0\1\u014a\61\0\1\u014b"+
    "\123\0\1\u014c\60\0\1\373\120\0\1\u014d\61\0\1\u014e"+
    "\61\0\4\u014f\5\0\1\u014f\7\0\1\u014f\3\0\2\u014f"+
    "\16\0\1\u014f\1\0\1\u014f\1\0\2\u014f\7\0\2\u014f"+
    "\13\0\3\233\4\u0150\1\101\1\0\3\233\1\u0150\7\233"+
    "\1\u0150\3\233\2\u0150\16\233\1\u0150\1\233\1\u0150\1\233"+
    "\2\u0150\7\233\2\u0150\13\233\1\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\15\5\1\143\7\5\10\0\6\5\2\0\1\74\1\316"+
    "\2\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\1\5\1\u0151\4\5\6\0\3\5\1\0\25\5"+
    "\7\0\3\111\4\u0152\2\111\1\247\2\111\1\u0152\1\250"+
    "\6\111\1\u0152\3\111\2\u0152\16\111\1\u0152\1\111\1\u0152"+
    "\1\111\2\u0152\7\111\2\u0152\13\111\1\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\2\5\1\u0153\22\5\10\0\6\5\2\0\1\74"+
    "\1\u0154\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\1\5\1\321"+
    "\1\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\1\u0155\2\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\5\5"+
    "\1\u0156\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\u0157\4\5"+
    "\6\0\1\5\1\u0158\1\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\1\u0159\2\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\u015a\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\2\5\1\u015b\1\0"+
    "\1\5\1\u015c\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\322\1\0\1\u015d\5\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\u0101"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\5\5\1\u015e"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\1\5\1\u015f\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\5\5"+
    "\1\u0160\17\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\5\1\320\4\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\3\5\1\u0116\2\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\4\5\1\316\20\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\1\5\1\143\1\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\1\316\1\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\u0161\4\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\u0162\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u0163\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\1\5\1\u0164\4\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\5"+
    "\1\143\4\5\6\0\3\5\1\0\25\5\10\0\1\5"+
    "\1\u0165\4\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\1\5\1\u0166\1\5\7\0\1\u0167\1\0\6\5"+
    "\6\0\3\5\1\0\16\5\1\51\6\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\1\5\1\u0168"+
    "\4\5\6\0\3\5\1\0\25\5\10\0\1\5\1\u0169"+
    "\4\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\u016a\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\2\5\1\u016b\22\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\u016c\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\2\5\1\u016d"+
    "\3\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\1\5"+
    "\1\u016e\1\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\16\5\1\51\4\5\1\u016f\1\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\u0170\4\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\1\u0171\5\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\15\5\1\u0172"+
    "\7\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\4\5\1\u0173\20\5"+
    "\10\0\6\5\2\0\1\74\1\u0174\2\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\u015b\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\u0175\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\1\u0176\5\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\3\5"+
    "\1\u0177\2\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\1\5\1\u0178\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\11\5\1\143\13\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\16\5\1\266\6\5\10\0\6\5\2\0\1\74\1\5"+
    "\1\253\1\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\1\5\1\u0179\4\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\u017a"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\15\5\1\u017b\7\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\155\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\5\1\u017c\4\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\u017d\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\1\161\2\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\16\5\1\u017e\6\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\3\5\1\u017f\2\5\6\0"+
    "\2\5\1\u0180\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\1\u0181\5\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\u0182"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\u0183\1\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\u0184\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\5\5\1\u0185\17\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\11\5\1\u0144\13\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u0186\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\1\5\1\u0187\1\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u0188\23\5\10\0\6\5"+
    "\2\0\1\74\1\u0189\2\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\5\5\1\u018a\17\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\1\u018b\5\5"+
    "\6\0\3\5\1\0\25\5\30\0\1\u018c\113\0\1\367"+
    "\11\0\1\u0149\35\0\1\u014b\1\u018d\4\u014b\1\u018d\2\0"+
    "\3\u014b\2\0\1\u018d\1\0\1\u014b\2\u018d\1\u014b\1\u018d"+
    "\6\u014b\1\0\5\u018d\3\u014b\1\u018d\25\u014b\2\u018d\1\0"+
    "\1\u018d\24\0\1\u018e\113\0\1\373\11\0\1\u014c\35\0"+
    "\1\u014e\1\u018f\4\u014e\1\u018f\2\0\3\u014e\2\0\1\u018f"+
    "\1\0\1\u014e\2\u018f\1\u014e\1\u018f\6\u014e\1\0\5\u018f"+
    "\3\u014e\1\u018f\25\u014e\2\u018f\1\0\1\u018f\6\0\4\u0190"+
    "\5\0\1\u0190\7\0\1\u0190\3\0\2\u0190\16\0\1\u0190"+
    "\1\0\1\u0190\1\0\2\u0190\7\0\2\u0190\13\0\3\233"+
    "\4\u0191\1\101\1\0\3\233\1\u0191\7\233\1\u0191\3\233"+
    "\2\u0191\16\233\1\u0191\1\233\1\u0191\1\233\2\u0191\7\233"+
    "\2\u0191\13\233\1\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\u0192\1\0\25\5"+
    "\7\0\3\111\4\u0193\2\111\1\247\2\111\1\u0193\1\250"+
    "\6\111\1\u0193\3\111\2\u0193\16\111\1\u0193\1\111\1\u0193"+
    "\1\111\2\u0193\7\111\2\u0193\13\111\1\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\u0194\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\316\5\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\2\5\1\u0160\22\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\1\5\1\u0195\1\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\143\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\1\5\1\u0196"+
    "\1\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\5\5"+
    "\1\u0197\17\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\u0198"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\5\5\1\322\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\u0196\24\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\u013a\4\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\320\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\2\5\1\u0199\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\u019a"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\5\5\1\316"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\5\5\1\u019b\17\5\10\0\1\5\1\u019c\4\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\1\u019d\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\1\u0110\2\5\1\0"+
    "\22\5\1\u0111\2\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\1\5\1\u0138\4\5\6\0\3\5"+
    "\1\0\1\u0139\24\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u019e\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\3\5\1\u019f\2\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\161"+
    "\5\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\5\5\1\u01a0\6\0"+
    "\3\5\1\0\4\5\1\u01a1\11\5\1\51\6\5\10\0"+
    "\6\5\2\0\1\74\1\5\1\u01a2\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\u01a3\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\5\5\1\u01a4\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\316\1\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\u01a5\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\3\5\1\u01a6"+
    "\2\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\u01a7\5\5\6\0"+
    "\3\5\1\0\25\5\10\0\1\5\1\u01a8\4\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\1\5\1\u01a9\4\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\135"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\1\5\1\u01aa\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\2\5\1\u01ab\3\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\u01ac"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\4\5\1\u01ad"+
    "\20\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\1\143\1\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\u01ae\1\0\5\5\1\135\17\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\5\1\u01af\4\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\u01b0\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\u0154\1\0\25\5\10\0\6\5\2\0\1\74\1\5"+
    "\1\u0132\1\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\1\5\1\u01b1\4\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\u01b2\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\1\5\1\u0102\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\3\5\1\u01b3"+
    "\2\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\1\5\1\u019a\1\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\u01b4\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\3\5\1\u01b5\2\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\3\5\1\356\2\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\5"+
    "\1\360\4\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\11\5\1\360\13\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\2\5\1\316\22\5\10\0\6\5\2\0\1\74"+
    "\1\5\1\u01b6\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\u01b7\23\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\3\5\1\u01b8"+
    "\21\5\30\0\1\u014b\101\0\1\u014e\63\0\4\5\5\0"+
    "\1\5\7\0\1\5\3\0\2\5\16\0\1\5\1\0"+
    "\1\5\1\0\2\5\7\0\2\5\13\0\3\233\4\100"+
    "\1\101\1\0\3\233\1\100\7\233\1\100\3\233\2\100"+
    "\16\233\1\100\1\233\1\100\1\233\2\100\7\233\2\100"+
    "\13\233\1\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\4\5\1\u01b9\20\5"+
    "\7\0\3\111\4\15\2\111\1\247\2\111\1\15\1\250"+
    "\6\111\1\15\3\111\2\15\16\111\1\15\1\111\1\15"+
    "\1\111\2\15\7\111\2\15\13\111\1\0\1\5\1\u01ba"+
    "\4\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\u0161\23\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\u011d\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\2\5\1\u0196\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\4\5\1\u01bb"+
    "\1\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\21\5\1\316\3\5\10\0\1\5\1\u01bc\4\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\1\5\1\u01bd\4\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\u01be\1\0\6\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\5"+
    "\1\u0157\4\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\15\5\1\322\7\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\4\5\1\u01bf\20\5\10\0\6\5\2\0\1\74"+
    "\1\u01c0\2\5\7\0\1\5\1\0\1\150\5\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\u01c1\23\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\1\366\5\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\2\5\1\u01c2\3\5\6\0\3\5\1\0\25\5\10\0"+
    "\1\5\1\u01c3\4\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\1\5"+
    "\1\u01c4\4\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\4\5\1\u0102\1\5"+
    "\6\0\3\5\1\0\25\5\10\0\1\5\1\u01c5\4\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\2\5\1\u01c6\3\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\u01c7"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\4\5\1\u01c8\20\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\u01c9\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\1\151\5\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\1\5\1\325\4\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\5\5\1\325\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\5\5\1\u01ca\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\3\5"+
    "\1\u01cb\1\5\1\u01cc\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\1\5\1\135\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\1\5\1\u01ca\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\1\5\1\u01cd"+
    "\4\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\1\5\1\360\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\5\5"+
    "\1\u018a\17\5\10\0\6\5\2\0\1\74\1\324\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\1\5\1\316\1\5\1\0\25\5\10\0"+
    "\1\5\1\u01ce\4\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\2\5\1\u01cf\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\u01d0\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\16\5\1\51\6\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\5\5\1\u01d1\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\1\5\1\u01d2"+
    "\4\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\2\5\1\u01d3\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\1\5\1\151\1\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\3\5\1\u01d4\2\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\1\u01d5\24\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\5"+
    "\1\u01d6\1\5\1\u01d7\1\u01d8\1\5\6\0\1\5\1\u01d9"+
    "\1\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\3\5\1\322\2\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\u01da"+
    "\23\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\2\5\1\143\3\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\u01db\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\1\5\1\u01dc\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\135\5\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\2\5\1\u01dd\3\5\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\3\5\1\u01de"+
    "\21\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\u01d8\1\5\6\0\1\5\1\u01d9\1\u01df"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\2\5\1\u01e0"+
    "\22\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\17\5\1\u01e1\5\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\3\5\1\320\2\5\6\0\3\5\1\0\25\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\1\u015d"+
    "\5\5\6\0\3\5\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\301\4\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\5\5\1\u01e2\6\0\3\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\1\u01e3\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\u01e4\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\1\320\2\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\25\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\5\1\0\1\5\1\u01e5\4\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\155\23\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\3\5\1\u01e4\2\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\1\5\1\261\4\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\u015e\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\321\1\0\6\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\1\u0196\5\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\1\5\1\u01e6\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\5\5\1\u01e7\17\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\u01e8\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\20\5\1\143\4\5\10\0\6\5\2\0\1\74"+
    "\3\5\7\0\1\322\1\0\6\5\6\0\3\5\1\0"+
    "\25\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\4\5\1\322\1\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\1\u01bf\5\5\6\0\3\5\1\0\25\5\10\0\6\5"+
    "\2\0\1\74\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\11\5\1\135\13\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\u01e9\5\5\6\0"+
    "\3\5\1\0\25\5\10\0\6\5\2\0\1\74\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\1\5\1\u01ea\1\5"+
    "\1\0\25\5\10\0\6\5\2\0\1\74\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\11\5\1\u01eb"+
    "\13\5\10\0\6\5\2\0\1\74\3\5\7\0\1\5"+
    "\1\0\3\5\1\u0101\2\5\6\0\3\5\1\0\25\5"+
    "\10\0\6\5\2\0\1\74\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\1\5\1\u01ec\23\5\10\0"+
    "\6\5\2\0\1\74\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\u01ca\1\0\25\5\10\0\6\5\2\0"+
    "\1\74\3\5\7\0\1\5\1\0\1\5\1\322\4\5"+
    "\6\0\3\5\1\0\25\5\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30954];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\2\11\16\1\1\11\31\1\1\11"+
    "\5\1\1\11\3\1\1\0\1\1\1\0\2\1\1\11"+
    "\1\0\10\1\3\11\101\1\1\11\11\0\1\1\1\0"+
    "\1\1\1\11\13\1\1\11\116\1\11\0\111\1\2\0"+
    "\1\1\2\0\1\1\1\0\74\1\5\0\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[492];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public QDLSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QDLSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QDLSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 266) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 28: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 29: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 30: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 31: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 32: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 33: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 34: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 35: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 36: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 37: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 38: break;
        case 6: 
          { addToken(Token.FUNCTION);
          }
        case 39: break;
        case 7: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 40: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 41: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 42: break;
        case 14: 
          { addToken(Token.ERROR_CHAR);
          }
        case 43: break;
        case 24: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 44: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 45: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 46: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 47: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 48: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 49: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 50: break;
        case 10: 
          { 
          }
        case 51: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 493: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 494: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 495: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
