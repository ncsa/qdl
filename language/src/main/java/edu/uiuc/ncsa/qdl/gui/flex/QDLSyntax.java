/* The following code was generated by JFlex 1.4.1 on 3/3/23, 10:01 AM */

/*
 * Generated on 3/3/23, 10:01 AM
 */
package edu.uiuc.ncsa.qdl.gui.flex;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * QDL
TokenMaker class generated by TokenMakerMaker utility 08/09/2022
By Jeff Gaynor
 */

public class QDLSyntax extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\72\1\15"+
    "\1\17\1\1\1\41\1\37\1\7\2\40\1\22\1\25\1\35\1\25"+
    "\1\23\1\21\1\4\3\4\4\6\2\3\1\45\1\35\1\74\1\73"+
    "\1\74\1\35\1\17\1\5\1\55\1\5\1\56\2\5\2\1\1\57"+
    "\2\1\1\61\1\1\1\62\4\1\1\63\7\1\1\75\1\11\1\36"+
    "\1\77\1\2\1\0\1\31\1\14\1\50\1\52\1\24\1\30\1\60"+
    "\1\42\1\44\1\66\1\51\1\32\1\54\1\13\1\47\1\43\1\70"+
    "\1\27\1\33\1\26\1\12\1\67\1\46\1\64\1\53\1\65\1\34"+
    "\1\76\1\34\1\41\55\0\1\100\2\0\1\100\47\0\1\100\37\0"+
    "\1\100\u02c8\0\1\71\3\0\1\71\u1cb5\0\1\100\u0117\0\1\100\160\0"+
    "\1\100\1\100\1\0\1\100\1\0\1\100\1\100\7\0\1\100\25\0"+
    "\1\100\1\100\1\100\1\100\35\0\1\100\13\0\1\100\1\100\12\0"+
    "\1\100\1\100\2\0\1\100\1\100\61\0\1\100\12\0\1\100\5\0"+
    "\1\100\137\0\1\100\1\0\1\100\u04db\0\1\100\1\100\u0223\0\1\100"+
    "\ud5f4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\1\7\1\10\1\5\10\1\1\11\3\1\1\6"+
    "\21\1\1\6\1\1\1\5\1\11\1\1\1\12\1\13"+
    "\5\12\1\14\3\12\1\0\1\15\1\0\1\15\1\3"+
    "\1\16\1\0\1\3\6\1\2\7\1\17\1\20\1\21"+
    "\1\22\23\1\1\6\20\1\1\6\1\1\1\23\37\1"+
    "\1\24\11\0\1\22\1\0\1\3\1\25\2\3\1\16"+
    "\1\3\7\1\1\7\1\26\1\7\3\1\1\6\3\1"+
    "\1\6\26\1\1\6\40\1\1\6\5\1\1\27\6\1"+
    "\11\0\1\3\4\1\1\7\4\1\1\30\33\1\1\6"+
    "\32\1\1\6\12\1\2\0\1\31\2\0\1\32\1\0"+
    "\1\3\1\1\1\7\72\1\5\0\1\3\1\1\1\7"+
    "\6\1\1\6\14\1\1\6\14\1\1\23\16\1\1\6"+
    "\43\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[499];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\303"+
    "\0\303\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\303"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\303\0\u0aaa\0\u0659"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\303\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\303\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u034d"+
    "\0\u0e38\0\u0e79\0\303\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\303\0\303\0\303"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u0104\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u0104"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\303"+
    "\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490"+
    "\0\u24d1\0\u2512\0\u2553\0\u2594\0\303\0\u25d5\0\u2616\0\u0eba"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\303\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615"+
    "\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d"+
    "\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25"+
    "\0\u0104\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4"+
    "\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc"+
    "\0\u403d\0\u407e\0\u0104\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3"+
    "\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3"+
    "\0\u4614\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db"+
    "\0\u481c\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3"+
    "\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb"+
    "\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3"+
    "\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb"+
    "\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203"+
    "\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b"+
    "\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23"+
    "\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u5bea\0\u5c2b"+
    "\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33"+
    "\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\u5ffa\0\u603b"+
    "\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1\0\u6202\0\u6243"+
    "\0\u6284\0\u51c2\0\u62c5\0\u5285\0\u6306\0\u6347\0\u6388\0\u63c9"+
    "\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590\0\u65d1"+
    "\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716\0\u6757\0\u6798\0\u67d9"+
    "\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e\0\u695f\0\u69a0\0\u69e1"+
    "\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8\0\u68dd"+
    "\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0"+
    "\0\u6df1\0\u6e32\0\u2aa8\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u1513"+
    "\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u70fd\0\u713e"+
    "\0\u717f\0\u71c0\0\u7201\0\u7242\0\u7283\0\u72c4\0\u7305\0\u7346"+
    "\0\u7387\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e"+
    "\0\u758f\0\u75d0\0\u7611\0\u7652\0\u7693\0\u76d4\0\u7715\0\u7756"+
    "\0\u7797\0\u77d8\0\u7819";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[499];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\4\1\11\1\16\1\17"+
    "\1\11\1\20\1\21\1\11\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\4\1\30\1\31\1\30\1\11"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\5\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\5\1\53\1\54\1\55\1\56\1\35"+
    "\1\57\1\60\1\61\1\62\1\4\1\11\10\63\1\64"+
    "\11\63\1\65\5\63\1\66\11\63\1\67\3\63\1\70"+
    "\32\63\10\71\1\72\17\71\1\73\11\71\1\74\3\71"+
    "\1\75\32\71\102\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\10\0"+
    "\3\77\2\6\1\77\1\6\2\0\4\77\2\0\1\77"+
    "\3\0\1\100\1\101\1\0\6\77\6\0\3\77\1\0"+
    "\24\77\6\0\1\77\7\102\1\103\1\104\1\105\67\102"+
    "\1\0\6\5\2\0\1\76\1\5\1\106\1\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\1\107\2\5\7\0\1\5\1\0"+
    "\1\5\1\110\4\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\111\2\5\1\112\1\5\6\0\3\5\1\0\1\5"+
    "\1\113\21\5\10\0\10\15\1\114\1\115\3\15\1\116"+
    "\63\15\20\0\1\16\71\0\1\11\7\0\1\117\1\120"+
    "\61\0\2\121\1\0\1\121\73\0\6\5\2\0\1\76"+
    "\1\5\1\122\1\5\7\0\1\5\1\0\4\5\1\123"+
    "\1\5\6\0\3\5\1\0\16\5\1\124\4\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\125\1\5\1\126\2\5\6\0\1\127\2\5\1\0"+
    "\1\5\1\130\21\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\131\1\0\3\5\1\132\2\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\5\1\133\1\5\1\134\1\135\1\5"+
    "\6\0\2\5\1\136\1\0\1\5\1\137\21\5\11\0"+
    "\6\5\2\0\1\76\2\5\1\140\7\0\1\5\1\0"+
    "\1\141\1\142\3\5\1\143\6\0\3\5\1\0\2\5"+
    "\1\144\20\5\11\0\6\5\2\0\1\76\1\5\1\145"+
    "\1\5\7\0\1\5\1\0\6\5\6\0\2\5\1\146"+
    "\1\0\1\5\1\147\1\150\20\5\11\0\6\5\2\0"+
    "\1\76\1\151\2\5\7\0\1\152\1\0\1\153\2\5"+
    "\1\154\1\155\1\5\6\0\1\156\1\5\1\157\1\0"+
    "\1\160\1\161\1\162\20\5\47\0\1\11\42\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\163\1\0\3\5\1\164"+
    "\2\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\165\4\5"+
    "\6\0\2\5\1\166\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\1\5\1\167\1\5\7\0\1\5\1\0\2\5"+
    "\1\170\2\5\1\171\6\0\3\5\1\0\4\5\1\172"+
    "\16\5\103\0\1\11\6\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\5\5\1\173\6\0\1\174\2\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\5\5\1\175\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\2\5\1\176\7\0\1\177"+
    "\1\0\3\5\1\200\2\5\6\0\1\201\2\5\1\0"+
    "\1\5\1\202\21\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\203\1\0\6\5\6\0\2\5\1\204\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\205"+
    "\1\0\3\5\1\206\2\5\6\0\2\5\1\207\1\0"+
    "\1\5\1\170\21\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\3\5\1\210\2\5\6\0\2\5"+
    "\1\211\1\0\1\5\1\212\21\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\1\5\1\213\21\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\214\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\1\5\1\215\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\2\5\1\216\20\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\217\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\1\220\2\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\221\1\0\1\222\5\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\4\5\1\223\1\5\6\0\3\5\1\0\1\5"+
    "\1\224\21\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\2\5\1\225\1\226\2\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\1\227\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\55\0\1\11\131\0\1\11\40\0\1\11\37\0\2\11"+
    "\1\0\10\63\1\0\11\63\1\0\5\63\1\0\11\63"+
    "\1\0\3\63\1\0\32\63\21\0\1\230\105\0\1\231"+
    "\15\0\1\232\62\0\1\233\120\0\1\234\32\0\10\71"+
    "\1\0\17\71\1\0\11\71\1\0\3\71\1\0\32\71"+
    "\26\0\1\235\15\0\1\236\62\0\1\237\120\0\1\240"+
    "\44\0\1\241\66\0\7\77\2\0\4\77\2\0\1\77"+
    "\4\0\1\77\1\0\6\77\6\0\3\77\1\0\24\77"+
    "\6\0\4\77\2\242\1\77\1\242\2\0\4\77\2\0"+
    "\1\77\4\0\1\77\1\243\6\77\6\0\3\77\1\0"+
    "\24\77\6\0\1\77\7\244\1\245\1\0\70\244\7\0"+
    "\1\245\71\0\4\244\1\246\1\244\1\247\1\250\1\0"+
    "\1\102\1\251\3\102\10\244\3\102\50\244\1\0\6\5"+
    "\2\0\1\76\2\5\1\252\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\253\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\6\5\1\254\14\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\255\21\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\256\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\1\5\1\257\21\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\4\5\1\260\11\5\1\145\4\5"+
    "\10\0\11\114\1\261\3\114\1\262\67\114\1\15\1\114"+
    "\2\15\1\0\1\15\1\263\3\15\10\114\3\15\50\114"+
    "\3\77\2\121\1\77\1\121\2\0\4\77\2\0\1\77"+
    "\4\0\1\101\1\0\6\77\6\0\3\77\1\0\24\77"+
    "\6\0\1\77\1\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\2\5\1\264"+
    "\20\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\5\5\1\265\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\266\1\0\6\5"+
    "\6\0\1\5\1\267\1\5\1\0\2\5\1\270\20\5"+
    "\11\0\6\5\2\0\1\76\1\271\2\5\7\0\1\5"+
    "\1\0\3\5\1\272\2\5\6\0\2\5\1\150\1\0"+
    "\5\5\1\170\15\5\11\0\6\5\2\0\1\76\1\5"+
    "\1\273\1\5\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\274\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\275\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\1\5\1\276\4\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\3\5\1\277"+
    "\17\5\11\0\6\5\2\0\1\76\1\5\1\300\1\5"+
    "\7\0\1\5\1\0\1\301\5\5\6\0\1\5\1\302"+
    "\1\5\1\0\4\5\1\303\1\5\1\304\12\5\1\305"+
    "\1\5\11\0\6\5\2\0\1\76\1\5\1\306\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\2\5\1\307\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\1\5\1\310\21\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\4\5\1\311\1\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\312\21\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\4\5\1\313"+
    "\1\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\314\4\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\5\5\1\145\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\3\5\1\315\2\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\12\5\1\140\10\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\5\5\1\316\6\0\2\5\1\315\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\317\21\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\5\5\1\320"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\2\5\1\321\7\5\1\322\10\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\6\5\1\145\14\5\11\0\6\5\2\0\1\76"+
    "\2\5\1\323\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\324\5\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\3\5\1\325\2\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\5\5\1\145\15\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\326\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\1\327"+
    "\2\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\1\5\1\273\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\17\5"+
    "\1\330\3\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\200\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\1\5\1\331\4\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\332\1\5\1\211\2\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\3\5\1\216\2\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\4\5"+
    "\1\331\1\333\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\334\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\2\5\1\335\20\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\2\5\1\336\2\5\1\337\6\0"+
    "\1\5\1\340\1\5\1\0\2\5\1\270\1\5\1\341"+
    "\16\5\11\0\1\5\1\342\4\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\343\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\1\5\1\344"+
    "\4\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\345"+
    "\1\0\23\5\11\0\1\5\1\346\4\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\1\5\1\347\4\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\350\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\1\351\5\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\352\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\1\5\1\353\1\5"+
    "\7\0\1\5\1\0\5\5\1\273\6\0\3\5\1\0"+
    "\6\5\1\354\14\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\5\5"+
    "\1\140\15\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\4\5\1\274\1\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\2\5\1\355\7\0"+
    "\1\5\1\0\1\356\1\5\1\357\3\5\6\0\3\5"+
    "\1\0\2\5\1\264\20\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\1\360\5\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\5\1\145\1\361\2\5\1\362\6\0"+
    "\3\5\1\0\6\5\1\145\14\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\5\5\1\335\6\0"+
    "\3\5\1\0\16\5\1\145\4\5\11\0\6\5\2\0"+
    "\1\76\1\5\1\145\1\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\4\5\1\363\16\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\364\21\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\2\5\1\365"+
    "\20\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\1\366\5\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\4\5\1\145\16\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\5\5\1\221"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\4\5\1\367\1\5\6\0"+
    "\3\5\1\0\6\5\1\370\14\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\371\5\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\372\1\0\1\5\1\373\4\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\163"+
    "\21\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\211\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\5\5"+
    "\1\374\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\375\2\5"+
    "\1\376\1\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\377\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\53\0\1\u0100\67\0\1\u0101\74\0"+
    "\1\u0102\120\0\1\u0103\75\0\1\u0104\67\0\1\u0105\74\0"+
    "\1\u0106\120\0\1\u0107\35\0\4\u0108\5\0\1\u0108\7\0"+
    "\1\u0108\3\0\2\u0108\16\0\1\u0108\1\0\1\u0108\2\0"+
    "\2\u0108\22\0\3\77\2\242\1\77\1\242\2\0\4\77"+
    "\2\0\1\77\4\0\1\77\1\0\6\77\6\0\3\77"+
    "\1\0\24\77\6\0\1\77\3\0\2\242\1\0\1\242"+
    "\72\0\7\244\1\103\1\0\74\244\1\247\1\244\1\247"+
    "\1\245\1\0\74\244\1\102\1\244\1\102\1\245\1\0"+
    "\73\244\4\u0109\1\103\1\0\3\244\1\u0109\7\244\1\u0109"+
    "\3\244\2\u0109\16\244\1\u0109\1\244\1\u0109\2\244\2\u0109"+
    "\22\244\1\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\1\5\1\u010a\21\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\1\5\1\211\20\5\1\u010b"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\u010c\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\1\5\1\331\21\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\3\5\1\335\2\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\2\5"+
    "\1\u010d\20\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\5\5\1\170"+
    "\15\5\10\0\10\114\1\0\73\114\4\u010e\2\114\1\261"+
    "\2\114\1\u010e\1\262\6\114\1\u010e\3\114\2\u010e\16\114"+
    "\1\u010e\1\114\1\u010e\2\114\2\u010e\22\114\1\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\1\5\1\u010f\21\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\170\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\2\5\1\u0110"+
    "\20\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\3\5\1\u0111\2\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\4\5\1\u0112\1\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\u0113\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\1\5\1\u0114\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\1\145\2\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\4\5\1\145\1\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\1\5\1\170\1\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\1\u0115\1\u0116\1\u0117\7\0\1\5"+
    "\1\0\4\5\1\u0118\1\u0119\6\0\3\5\1\0\20\5"+
    "\1\u011a\2\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\u011b\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\3\5"+
    "\1\u011c\2\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\1\u011d\2\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\4\5\1\u011e\1\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\1\u011f"+
    "\2\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\3\5\1\u0120\2\5\6\0\3\5\1\0\1\5"+
    "\1\u0121\21\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\u0122\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\3\5\1\145\1\u0123\16\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\5\5"+
    "\1\u0124\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\6\5\1\u0125\14\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\5\5\1\271\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\u0126"+
    "\21\5\11\0\6\5\2\0\1\76\3\5\7\0\1\u0127"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\1\5"+
    "\1\u0128\4\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\3\5\1\145\17\5\11\0"+
    "\6\5\2\0\1\76\1\5\1\273\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\u0129\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\5\5\1\273\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\1\u012a\5\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\3\5"+
    "\1\u012b\2\5\6\0\3\5\1\0\23\5\11\0\1\5"+
    "\1\u012c\4\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\4\5\1\u012d\1\u0119"+
    "\6\0\3\5\1\0\23\5\11\0\1\5\1\u012e\4\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\1\5\1\u012f\4\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\u0120\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\2\5"+
    "\1\u0130\3\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\145\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\1\145\5\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\u0131\1\0\23\5\11\0"+
    "\1\5\1\u0132\4\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\1\145\2\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\1\5\1\331\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\3\5\1\145\17\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\1\5\1\145\21\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\u0133\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\1\u0134\2\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\u0135\1\0\6\5"+
    "\6\0\2\5\1\u0136\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\1\5\1\u0137\1\5\7\0\1\5\1\0\2\5"+
    "\1\u0138\1\5\1\u012d\1\5\6\0\3\5\1\0\4\5"+
    "\1\u0139\16\5\11\0\6\5\2\0\1\76\1\5\1\u013a"+
    "\1\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\6\5\1\u013b\14\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\4\5\1\265\1\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\u013c\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\u013d\1\0\1\5\1\u013e\4\5\6\0"+
    "\3\5\1\0\1\u013f\22\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\4\5\1\u0140\1\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\2\5"+
    "\1\u0141\20\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\2\5\1\u0142"+
    "\20\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\1\u0143\4\5\1\u0144\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\6\5\1\u0145\14\5\11\0"+
    "\6\5\2\0\1\76\1\u0146\2\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\1\5\1\u0147\21\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\u0148"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\u0149\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\2\5"+
    "\1\u014a\3\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\1\5\1\u014b\1\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\1\u014c\2\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\4\5\1\u014d\1\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\u014e\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\u014f\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\4\5\1\371\1\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\2\5\1\u0150\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\6\5\1\371"+
    "\14\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\u0151\1\0\23\5\11\0"+
    "\1\5\1\u0152\4\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\1\5"+
    "\1\u0153\4\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\1\u0154\2\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\1\5\1\154\4\5\6\0\3\5"+
    "\1\0\23\5\55\0\1\u0155\57\0\1\u0100\117\0\1\u0156"+
    "\60\0\1\u0157\122\0\1\u0158\57\0\1\u0104\117\0\1\u0159"+
    "\60\0\1\u015a\60\0\4\u015b\5\0\1\u015b\7\0\1\u015b"+
    "\3\0\2\u015b\16\0\1\u015b\1\0\1\u015b\2\0\2\u015b"+
    "\22\0\3\244\4\u015c\1\103\1\0\3\244\1\u015c\7\244"+
    "\1\u015c\3\244\2\u015c\16\244\1\u015c\1\244\1\u015c\2\244"+
    "\2\u015c\22\244\1\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\16\5\1\145"+
    "\4\5\11\0\6\5\2\0\1\76\1\330\2\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\u015d\4\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\3\5\1\170\17\5\10\0\3\114\4\u015e"+
    "\2\114\1\261\2\114\1\u015e\1\262\6\114\1\u015e\3\114"+
    "\2\u015e\16\114\1\u015e\1\114\1\u015e\2\114\2\u015e\22\114"+
    "\1\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\4\5\1\330\16\5\11\0"+
    "\6\5\2\0\1\76\1\u015f\2\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\1\5\1\216\1\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\1\u0160\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\5\5\1\u0161\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\1\5\1\u0162\4\5\6\0\1\5\1\u0163\1\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\1\u0164\2\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u0165\21\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\1\5\1\u0166\21\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\u0167\5\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\5\5\1\u0168\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\1\5\1\u0169\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\6\5\1\u016a\14\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\211\4\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\3\5\1\u011f"+
    "\2\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\2\5\1\330\20\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\1\5\1\145"+
    "\1\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\21\5"+
    "\1\330\1\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\5\1\u016b\4\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\1\5\1\u016c\21\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\u016d\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\1\5\1\u016e"+
    "\4\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\1\5\1\145\4\5\6\0"+
    "\3\5\1\0\23\5\11\0\1\5\1\u016f\4\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\1\5\1\u0170"+
    "\1\5\7\0\1\u0171\1\0\4\5\1\u0172\1\5\6\0"+
    "\3\5\1\0\3\5\1\u0173\17\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\u0174\4\5"+
    "\6\0\3\5\1\0\23\5\11\0\1\5\1\u0175\4\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\4\5\1\170\1\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\u0176\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\2\5\1\u0177\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\4\5\1\u0178\16\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\1\u0179\5\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\2\5\1\u017a\3\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\1\5\1\u017b\1\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\3\5\1\u017c\15\5\1\u017d"+
    "\1\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\1\5\1\u017e\4\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\1\u017f\5\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\16\5\1\u0180\4\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\2\5\1\u0154\20\5\11\0\6\5\2\0\1\76"+
    "\1\204\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\1\u0181\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\u0182\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\u0183\5\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\3\5\1\u0184\2\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\1\5\1\u0185"+
    "\1\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\16\5\1\u0186\4\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\163\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\u0187\4\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\u0188"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\1\170\2\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\3\5\1\u0189\17\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\3\5"+
    "\1\u018a\2\5\6\0\2\5\1\u018b\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\u018c"+
    "\5\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\1\5\1\u018d\21\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\12\5\1\145\10\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\3\5"+
    "\1\277\17\5\11\0\6\5\2\0\1\76\1\5\1\265"+
    "\1\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\1\5\1\u018e\4\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\u018f\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\4\5\1\u0190\1\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\4\5\1\u0191\1\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\u0192\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\6\5\1\u0193\14\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\12\5\1\u0150\10\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\u0194\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\1\5"+
    "\1\u0195\1\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\1\u0196\2\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\6\5"+
    "\1\u0197\14\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\u0198\5\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\140\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\31\0\1\u0199\112\0"+
    "\1\u0100\11\0\1\u0155\34\0\1\u0157\1\u019a\4\u0157\1\u019a"+
    "\2\0\3\u0157\2\0\1\u019a\1\0\1\u0157\2\u019a\1\u0157"+
    "\1\u019a\6\u0157\1\0\5\u019a\3\u0157\1\u019a\23\u0157\1\0"+
    "\2\u019a\1\0\1\u019a\24\0\1\u019b\112\0\1\u0104\11\0"+
    "\1\u0158\34\0\1\u015a\1\u019c\4\u015a\1\u019c\2\0\3\u015a"+
    "\2\0\1\u019c\1\0\1\u015a\2\u019c\1\u015a\1\u019c\6\u015a"+
    "\1\0\5\u019c\3\u015a\1\u019c\23\u015a\1\0\2\u019c\1\0"+
    "\1\u019c\6\0\4\u019d\5\0\1\u019d\7\0\1\u019d\3\0"+
    "\2\u019d\16\0\1\u019d\1\0\1\u019d\2\0\2\u019d\22\0"+
    "\3\244\4\u019e\1\103\1\0\3\244\1\u019e\7\244\1\u019e"+
    "\3\244\2\u019e\16\244\1\u019e\1\244\1\u019e\2\244\2\u019e"+
    "\22\244\1\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\2\5\1\u019f\1\0\23\5\10\0"+
    "\3\114\4\u01a0\2\114\1\261\2\114\1\u01a0\1\262\6\114"+
    "\1\u01a0\3\114\2\u01a0\16\114\1\u01a0\1\114\1\u01a0\2\114"+
    "\2\u01a0\22\114\1\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\330\5\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\4\5\1\u016a\16\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\1\5\1\u01a1\1\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\145\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\1\5\1\u01a2"+
    "\1\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\6\5"+
    "\1\u01a3\14\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\1\5\1\u01a4"+
    "\21\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\1\u01a2\22\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\u0140\4\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\1\5\1\211\21\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\u01a5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\u01a6\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\5\5\1\330\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\6\5\1\u01a7\14\5\11\0\1\5\1\u01a8"+
    "\4\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\1\u01a9\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\20\5\1\u011a\2\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\1\5\1\u013e\4\5\6\0"+
    "\3\5\1\0\1\u013f\22\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\u01aa\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\3\5\1\u01ab\2\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\u01ac\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\203\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\1\170\5\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\2\5\1\u01ad\1\u0173"+
    "\17\5\11\0\6\5\2\0\1\76\1\5\1\u01ae\1\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\5\5\1\331\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\u01af\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\5\5\1\u01b0\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\4\5\1\330\1\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\1\u01b1\5\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\u01b2\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\3\5\1\u01b3\2\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\u01b4\5\5\6\0\3\5\1\0\23\5"+
    "\11\0\1\5\1\u01b5\4\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\1\5\1\u01b6\4\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\1\5\1\u01b7\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\2\5\1\u01b8\3\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\2\5\1\u01b9"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\2\5\1\u01ba"+
    "\20\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\21\5\1\145\1\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\2\5\1\u01bb\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\u015f\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\1\5\1\u0146\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\1\5\1\u01bc\4\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\u01bd\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\1\5\1\u010b\1\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\3\5"+
    "\1\u01be\2\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\1\5\1\u01a6\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\u01bf\1\0\6\5\1\140\14\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\u01c0\4\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\3\5\1\154\2\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\u01c1\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\3\5\1\u01c2\2\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\3\5"+
    "\1\367\2\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\1\5\1\371"+
    "\4\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\12\5\1\371\10\5\11\0\6\5\2\0\1\76"+
    "\1\5\1\u01c3\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\1\5"+
    "\1\u01c4\21\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\5\5\1\u01c5"+
    "\15\5\31\0\1\u0157\100\0\1\u015a\62\0\4\5\5\0"+
    "\1\5\7\0\1\5\3\0\2\5\16\0\1\5\1\0"+
    "\1\5\2\0\2\5\22\0\3\244\4\102\1\103\1\0"+
    "\3\244\1\102\7\244\1\102\3\244\2\102\16\244\1\102"+
    "\1\244\1\102\2\244\2\102\22\244\1\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\2\5\1\u01c6\20\5\10\0\3\114\4\15\2\114"+
    "\1\261\2\114\1\15\1\262\6\114\1\15\3\114\2\15"+
    "\16\114\1\15\1\114\1\15\2\114\2\15\22\114\1\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u016b\21\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\u0126\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\2\5"+
    "\1\u01a2\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\4\5\1\u01c7\1\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\17\5\1\330\3\5\11\0"+
    "\1\5\1\u01c8\4\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\1\5"+
    "\1\u01c9\4\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\u01ca\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\5\1\u0162\4\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\16\5\1\331\4\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\2\5\1\u01cb\20\5\11\0"+
    "\6\5\2\0\1\76\1\5\1\u0154\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\1\5\1\u01cc\21\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\377\5\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\2\5\1\u01cd\3\5\6\0\3\5"+
    "\1\0\23\5\11\0\1\5\1\u01ce\4\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\1\5\1\u01cf\4\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\5\5\1\u01d0\15\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\4\5"+
    "\1\u010b\1\5\6\0\3\5\1\0\23\5\11\0\1\5"+
    "\1\u01d1\4\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\2\5\1\u01d2\3\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\1\5\1\u01d3\21\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\2\5"+
    "\1\u01d4\20\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\u01d5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\1\154\5\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\1\5\1\336"+
    "\4\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\5\5\1\u01d6\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\3\5\1\u01d7\1\5\1\u01d8\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\1\5"+
    "\1\140\1\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\1\5\1\u01d6"+
    "\1\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\5\5\1\336\6\0\3\5\1\0\23\5\11\0"+
    "\1\5\1\u01d9\4\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\1\5\1\371\1\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\6\5\1\u0197\14\5\11\0\6\5\2\0\1\76"+
    "\1\334\2\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\1\5\1\330\1\5\1\0"+
    "\23\5\11\0\1\5\1\u01da\4\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\u01db\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\3\5"+
    "\1\0\3\5\1\u0173\17\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\5\1\0\5\5\1\u0119\6\0\3\5"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\1\5\1\u01dc\4\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\1\5\1\154\1\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\3\5\1\u01dd\2\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\u01de\22\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\5\1\u01df\1\5"+
    "\1\u01e0\1\223\1\5\6\0\1\5\1\u01e1\1\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\3\5\1\331\2\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\1\5\1\u01e2\21\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\2\5"+
    "\1\145\3\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\1\u01e3\5\5"+
    "\6\0\3\5\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\1\5\1\u01e4\1\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\1\140\5\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\2\5\1\u01e5\3\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\5\5\1\u01e6\15\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\u01e7\2\5\1\223\1\5\6\0\1\5\1\u01e1\1\u01e8"+
    "\1\0\23\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\3\5\1\0\4\5\1\u01e9"+
    "\16\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\3\5\1\211\2\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\1\5\1\312\4\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\1\u01ea\2\5\7\0\1\5\1\0"+
    "\6\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\u01eb\1\0\23\5\11\0\6\5\2\0\1\76\1\211"+
    "\2\5\7\0\1\5\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\1\5\1\142\4\5\6\0\3\5\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\3\5\1\u01eb\2\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\5"+
    "\1\150\4\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\2\5\1\u0168\1\0\23\5\11\0\6\5\2\0\1\76"+
    "\3\5\7\0\1\216\1\0\6\5\6\0\3\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\1\u01a2\5\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\1\5\1\u01ec\1\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\23\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\u01ed\1\0\6\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\6\5"+
    "\1\u01ee\14\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\2\5\1\u01ef\1\0\23\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\4\5\1\331\1\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\1\u01cb"+
    "\5\5\6\0\3\5\1\0\23\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\1\u01f0\5\5\6\0"+
    "\3\5\1\0\23\5\11\0\6\5\2\0\1\76\3\5"+
    "\7\0\1\5\1\0\6\5\6\0\3\5\1\0\6\5"+
    "\1\u01f1\14\5\11\0\6\5\2\0\1\76\3\5\7\0"+
    "\1\5\1\0\6\5\6\0\1\5\1\u01f2\1\5\1\0"+
    "\23\5\11\0\6\5\2\0\1\76\3\5\7\0\1\5"+
    "\1\0\6\5\6\0\3\5\1\0\12\5\1\u01f3\10\5"+
    "\11\0\6\5\2\0\1\76\3\5\7\0\1\5\1\0"+
    "\3\5\1\u010a\2\5\6\0\3\5\1\0\23\5\11\0"+
    "\6\5\2\0\1\76\3\5\7\0\1\5\1\0\6\5"+
    "\6\0\3\5\1\0\1\5\1\u0121\21\5\11\0\6\5"+
    "\2\0\1\76\3\5\7\0\1\5\1\0\6\5\6\0"+
    "\3\5\1\0\1\5\1\161\21\5\11\0\6\5\2\0"+
    "\1\76\3\5\7\0\1\5\1\0\6\5\6\0\2\5"+
    "\1\u01d6\1\0\23\5\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[30810];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\2\11\16\1\1\11\25\1\1\11"+
    "\5\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\0\11\1\3\11\107\1\1\11\11\0"+
    "\1\1\1\0\1\1\1\11\14\1\1\11\115\1\11\0"+
    "\114\1\2\0\1\1\2\0\1\1\1\0\75\1\5\0"+
    "\126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[499];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public QDLSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QDLSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QDLSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 282) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 27: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 28: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 29: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 30: break;
        case 22: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 31: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 32: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 33: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 34: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 35: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 36: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 37: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 38: break;
        case 6: 
          { addToken(Token.FUNCTION);
          }
        case 39: break;
        case 7: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 40: break;
        case 23: 
          { addToken(Token.DATA_TYPE);
          }
        case 41: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 42: break;
        case 14: 
          { addToken(Token.ERROR_CHAR);
          }
        case 43: break;
        case 24: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 44: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 45: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 46: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 47: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 48: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 49: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 50: break;
        case 10: 
          { 
          }
        case 51: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 500: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 501: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 502: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
