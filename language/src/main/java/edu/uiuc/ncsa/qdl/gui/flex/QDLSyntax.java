/* The following code was generated by JFlex 1.4.1 on 8/9/22, 11:58 AM */

/*
 * Generated on 8/9/22, 11:58 AM
 */
package edu.uiuc.ncsa.qdl.gui.flex;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * QDL
TokenMaker class generated by TokenMakerMaker utility 08/09/2022
By Jeff Gaynor
 */

public class QDLSyntax extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\10\1\0\1\20\1\16\22\0\1\20\1\27\1\15"+
    "\1\17\1\1\1\32\1\72\1\7\2\31\1\22\1\25\1\27\1\25"+
    "\1\23\1\21\1\4\3\4\1\65\1\6\1\64\1\6\2\3\1\42"+
    "\1\27\1\16\1\73\1\16\1\27\1\17\1\5\1\53\1\5\1\54"+
    "\2\5\2\1\1\55\2\1\1\57\1\1\1\60\4\1\1\61\7\1"+
    "\1\74\1\11\1\30\1\76\1\2\1\0\1\44\1\14\1\51\1\47"+
    "\1\24\1\37\1\56\1\33\1\40\1\67\1\63\1\41\1\52\1\13"+
    "\1\46\1\35\1\71\1\45\1\36\1\34\1\12\1\70\1\43\1\62"+
    "\1\50\1\66\1\26\1\75\1\26\1\32\55\0\1\77\2\0\1\77"+
    "\47\0\1\77\37\0\1\77\u1f82\0\1\77\u0117\0\1\77\163\0\1\77"+
    "\1\0\1\77\1\77\35\0\1\77\1\77\1\77\1\77\35\0\1\77"+
    "\13\0\1\77\1\77\12\0\1\77\1\77\2\0\1\77\1\77\61\0"+
    "\1\77\12\0\1\77\5\0\1\77\137\0\1\77\1\0\1\77\u04db\0"+
    "\1\77\1\77\ud818\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\1\7\1\5\2\1\1\10\33\1\1\10\1\1"+
    "\1\11\1\12\5\11\1\13\3\11\1\0\1\14\1\0"+
    "\1\14\1\3\1\15\1\0\1\3\5\1\1\16\1\17"+
    "\1\20\11\1\1\6\17\1\1\21\46\1\1\22\11\0"+
    "\1\20\1\0\1\3\1\23\2\3\1\15\1\3\11\1"+
    "\1\6\5\1\1\6\30\1\1\6\33\1\1\6\4\1"+
    "\1\24\6\1\11\0\1\3\105\1\2\0\1\25\2\0"+
    "\1\26\1\0\1\3\72\1\5\0\1\3\17\1\1\6"+
    "\11\1\1\6\7\1\1\21\71\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\300"+
    "\0\300\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\300\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\300"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\300\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0300\0\u0d80\0\u0dc0\0\300\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\300\0\300"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u0100\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u0100\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00"+
    "\0\u1f40\0\300\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0"+
    "\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\300\0\u2280"+
    "\0\u22c0\0\u0e00\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40"+
    "\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040"+
    "\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240"+
    "\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u0100\0\u3580\0\u35c0\0\u3600"+
    "\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800"+
    "\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00"+
    "\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00"+
    "\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00"+
    "\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000"+
    "\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200"+
    "\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400"+
    "\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600"+
    "\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800"+
    "\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940\0\u4980\0\u49c0\0\u4a00"+
    "\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00"+
    "\0\u4c40\0\u4c80\0\u4cc0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00"+
    "\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0\0\u5000"+
    "\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400"+
    "\0\u5440\0\u5480\0\u54c0\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600"+
    "\0\u5640\0\u5680\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800"+
    "\0\u5840\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00"+
    "\0\u5a40\0\u5a80\0\u5ac0\0\u5b00\0\u5b40\0\u4b40\0\u5b80\0\u4c00"+
    "\0\u5bc0\0\u5c00\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80"+
    "\0\u5dc0\0\u5e00\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80"+
    "\0\u5fc0\0\u6000\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180"+
    "\0\u61c0\0\u6200\0\u6240\0\u6280\0\u62c0\0\u6000\0\u6300\0\u6340"+
    "\0\u6380\0\u63c0\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540"+
    "\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680\0\u66c0\0\u6700\0\u2700"+
    "\0\u6740\0\u6780\0\u67c0\0\u6800\0\u6840\0\u6880\0\u68c0\0\u6900"+
    "\0\u6940\0\u6980\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00"+
    "\0\u6b40\0\u6b80\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00"+
    "\0\u6d40\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u6e80\0\u6ec0\0\u6f00"+
    "\0\u6f40\0\u6f80\0\u6fc0\0\u7000\0\u7040\0\u7080\0\u70c0\0\u7100"+
    "\0\u7140\0\u7180\0\u71c0\0\u7200\0\u7240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\2\6\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\4\1\11\1\15\1\16\1\11"+
    "\1\17\1\20\1\11\1\21\1\4\2\21\1\11\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\5\1\37\1\40\1\41"+
    "\1\42\1\43\1\5\1\44\1\45\1\46\1\5\1\47"+
    "\2\6\1\5\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\4\1\11\10\57\1\60\11\57\1\61\10\57"+
    "\1\62\3\57\1\63\3\57\1\64\34\57\10\65\1\66"+
    "\22\65\1\67\3\65\1\70\3\65\1\71\34\65\101\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\6\0\3\73\2\6\1\73\1\6\2\0"+
    "\4\73\2\0\1\73\3\0\1\74\1\75\6\0\7\73"+
    "\1\0\21\73\2\6\4\73\5\0\1\73\7\76\1\77"+
    "\1\100\1\101\66\76\1\0\6\5\2\0\1\72\1\5"+
    "\1\102\1\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\1\103\2\5\7\0\1\5"+
    "\6\0\7\5\1\0\2\5\1\104\24\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\2\5\1\105\1\106\23\5\26\0\1\15\70\0\1\11"+
    "\7\0\1\107\1\110\60\0\2\111\1\0\1\111\55\0"+
    "\2\111\13\0\6\5\2\0\1\72\1\5\1\112\1\5"+
    "\7\0\1\5\6\0\6\5\1\113\1\0\17\5\1\114"+
    "\7\5\7\0\6\5\2\0\1\72\3\5\7\0\1\115"+
    "\6\0\7\5\1\0\1\5\1\116\25\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\1\117\6\5"+
    "\1\0\1\5\1\120\1\121\1\122\23\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\5\5\1\123"+
    "\1\5\1\0\2\5\1\124\24\5\7\0\6\5\2\0"+
    "\1\72\1\125\2\5\7\0\1\126\6\0\1\127\1\130"+
    "\3\5\1\131\1\5\1\0\1\5\1\132\4\5\1\133"+
    "\20\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\5\5\1\134\1\135\1\0\1\5\1\136\1\137"+
    "\1\140\23\5\7\0\6\5\2\0\1\72\1\5\1\141"+
    "\1\5\7\0\1\5\6\0\3\5\1\142\1\143\2\5"+
    "\1\0\4\5\1\144\22\5\7\0\6\5\2\0\1\72"+
    "\1\5\1\123\1\5\7\0\1\5\6\0\5\5\1\145"+
    "\1\5\1\0\3\5\1\146\23\5\101\0\1\11\5\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\1\147"+
    "\2\5\1\150\3\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\2\5\1\151\7\0\1\5\6\0\1\5\1\152"+
    "\1\153\1\154\3\5\1\0\6\5\1\155\10\5\1\156"+
    "\7\5\7\0\6\5\2\0\1\72\3\5\7\0\1\157"+
    "\6\0\7\5\1\0\1\5\1\160\25\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\3\5\1\161"+
    "\3\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\162\6\0\5\5\1\163\1\5\1\0\1\5"+
    "\1\164\25\5\7\0\6\5\2\0\1\72\2\5\1\165"+
    "\7\0\1\166\6\0\1\167\6\5\1\0\1\5\1\170"+
    "\1\5\1\171\23\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\1\5\1\172\1\5"+
    "\1\173\23\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\3\5\1\174\23\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\175\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\1\5\1\176"+
    "\1\5\7\0\1\5\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\5\5"+
    "\1\177\1\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\1\200\2\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\201\6\0"+
    "\1\5\1\202\5\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\203\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\3\5\1\204\23\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\205\6\0\4\5\1\206\2\5"+
    "\1\0\1\5\1\207\2\5\1\210\22\5\7\0\6\5"+
    "\2\0\1\72\1\211\2\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\100\0\1\11\47\0\1\11\132\0\1\11"+
    "\32\0\1\11\44\0\2\11\1\0\10\57\1\0\11\57"+
    "\1\0\10\57\1\0\3\57\1\0\3\57\1\0\34\57"+
    "\21\0\1\212\112\0\1\213\77\0\1\214\3\0\1\215"+
    "\102\0\1\216\34\0\10\65\1\0\22\65\1\0\3\65"+
    "\1\0\3\65\1\0\34\65\34\0\1\217\77\0\1\220"+
    "\3\0\1\221\102\0\1\222\46\0\1\223\65\0\7\73"+
    "\2\0\4\73\2\0\1\73\4\0\1\73\6\0\7\73"+
    "\1\0\27\73\5\0\4\73\2\224\1\73\1\224\2\0"+
    "\4\73\2\0\1\73\4\0\1\73\1\225\5\0\7\73"+
    "\1\0\21\73\2\224\4\73\5\0\1\73\7\226\1\227"+
    "\1\0\67\226\7\0\1\227\70\0\4\226\1\230\1\226"+
    "\1\231\1\232\1\0\1\76\1\233\3\76\16\226\1\76"+
    "\2\226\1\76\5\226\1\76\16\226\2\231\12\226\1\0"+
    "\6\5\2\0\1\72\2\5\1\234\7\0\1\5\6\0"+
    "\5\5\1\235\1\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\7\5"+
    "\1\236\17\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\3\5\1\237\23\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\240\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\4\5\1\241\12\5\1\123"+
    "\7\5\6\0\3\73\2\111\1\73\1\111\2\0\4\73"+
    "\2\0\1\73\4\0\1\75\6\0\7\73\1\0\21\73"+
    "\2\111\4\73\5\0\1\73\1\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\6\5\1\242"+
    "\20\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\3\5\1\243\3\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\244\6\0\2\5\1\245"+
    "\4\5\1\0\6\5\1\246\20\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\1\5"+
    "\1\247\25\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\3\5\1\250\2\5\1\251\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\252\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\1\5"+
    "\1\253\1\5\7\0\1\5\6\0\5\5\1\254\1\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\1\243\2\5"+
    "\7\0\1\5\6\0\5\5\1\255\1\5\1\0\1\5"+
    "\1\256\3\5\1\143\21\5\7\0\1\5\1\257\4\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\20\5\1\260\6\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\5\5\1\261\1\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\2\5\1\262\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\1\5\1\263\5\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\1\264\2\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\1\5"+
    "\1\265\25\5\7\0\6\5\2\0\1\72\1\5\1\253"+
    "\1\5\7\0\1\5\6\0\7\5\1\0\23\5\1\266"+
    "\3\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\5\5\1\123\21\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\1\5\1\267\1\270\24\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\6\5\1\271\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\3\5\1\272\23\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\6\5\1\113\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\3\5\1\273\23\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\2\5\1\274\24\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\2\5\1\275\1\276\1\277\2\5"+
    "\1\0\4\5\1\300\1\5\1\246\20\5\7\0\1\5"+
    "\1\301\4\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\302\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\3\5\1\303"+
    "\3\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\13\5\1\304\13\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\5\5\1\305\1\5\1\0\27\5\7\0\1\5\1\306"+
    "\4\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\3\5\1\123\3\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\1\5\1\307\25\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\2\5\1\310\4\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\3\5\1\311\1\5\1\307\1\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\3\5\1\312\23\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\5\5\1\151\1\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\1\5\1\313"+
    "\1\5\7\0\1\5\6\0\1\5\1\314\1\315\4\5"+
    "\1\0\4\5\1\316\2\5\1\317\15\5\1\320\1\5"+
    "\7\0\6\5\2\0\1\72\1\5\1\321\1\5\7\0"+
    "\1\5\6\0\5\5\1\322\1\5\1\0\27\5\7\0"+
    "\1\5\1\323\4\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\2\5\1\324\7\0\1\5\6\0\1\5\1\325\2\5"+
    "\1\326\2\5\1\0\6\5\1\242\20\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\4\5\1\327"+
    "\2\5\1\0\2\5\1\123\4\5\1\123\17\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\1\5"+
    "\1\330\5\5\1\0\27\5\7\0\1\5\1\331\4\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\5\5\1\332\1\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\333\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\1\5\1\334\5\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\1\5\1\335\1\5\7\0\1\5\6\0"+
    "\3\5\1\253\3\5\1\0\7\5\1\336\17\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\3\5"+
    "\1\337\3\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\4\5\1\340"+
    "\22\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\3\5\1\341\23\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\6\5\1\342\20\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\1\5\1\343\5\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\3\5\1\201\3\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\6\5\1\344\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\1\5\1\345\5\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\346\6\0\7\5\1\0"+
    "\2\5\1\347\24\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\5\5\1\151\21\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\5\5\1\267\1\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\1\5\1\350\1\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\3\5\1\351\3\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\2\5\1\352\24\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\350\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\353\6\0\7\5"+
    "\1\0\27\5\42\0\1\354\100\0\1\355\103\0\1\356"+
    "\101\0\1\357\70\0\1\360\100\0\1\361\103\0\1\362"+
    "\101\0\1\363\37\0\4\364\5\0\1\364\7\0\1\364"+
    "\12\0\1\364\4\0\1\364\2\0\1\364\1\0\1\364"+
    "\1\0\2\364\7\0\2\364\12\0\3\73\2\224\1\73"+
    "\1\224\2\0\4\73\2\0\1\73\4\0\1\73\6\0"+
    "\7\73\1\0\21\73\2\224\4\73\5\0\1\73\3\0"+
    "\2\224\1\0\1\224\55\0\2\224\12\0\7\226\1\77"+
    "\1\0\73\226\1\231\1\226\1\231\1\227\1\0\53\226"+
    "\2\231\16\226\1\76\1\226\1\76\1\227\1\0\53\226"+
    "\2\76\15\226\4\365\1\77\1\0\3\226\1\365\7\226"+
    "\1\365\12\226\1\365\4\226\1\365\2\226\1\365\1\226"+
    "\1\365\1\226\2\365\7\226\2\365\12\226\1\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\3\5\1\366\23\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\3\5\1\267\22\5"+
    "\1\367\7\0\6\5\2\0\1\72\3\5\7\0\1\370"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\3\5\1\251"+
    "\23\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\1\5\1\337\25\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\5\5\1\143\21\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\3\5\1\371\23\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\143\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\6\5\1\372\20\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\1\5\1\373\25\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\6\5\1\374\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\4\5\1\123\22\5\7\0\1\5"+
    "\1\375\4\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\1\123\6\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\1\5\1\123\5\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\1\5\1\143\1\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\1\123\6\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\6\5\1\123\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\7\5\1\123\17\5\7\0\6\5\2\0\1\72\1\5"+
    "\1\376\1\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\1\377\1\u0100\1\u0101\7\0"+
    "\1\5\6\0\1\u0102\2\5\1\u0103\2\5\1\u0104\1\0"+
    "\24\5\1\u0105\2\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\u0106\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\1\5\1\251\1\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\3\5\1\u0103\3\5\1\0\27\5"+
    "\7\0\1\5\1\u0107\4\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\4\5\1\u0108\2\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\2\5\1\u0109\24\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\123\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\1\5\1\123"+
    "\1\5\7\0\1\5\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\5\5"+
    "\1\u010a\1\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\u010b\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\3\5\1\u010c\23\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\7\5\1\u010d"+
    "\17\5\7\0\1\5\1\u010e\4\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\1\u010f\2\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\u0110\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\3\5"+
    "\1\123\23\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\u0111\6\0\5\5\1\u0112\1\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\4\5"+
    "\1\u0113\1\5\1\u0114\1\0\4\5\1\u0115\22\5\7\0"+
    "\6\5\2\0\1\72\1\5\1\u0116\1\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\1\5\1\u0117\5\5\1\0"+
    "\27\5\7\0\1\5\1\u0118\4\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\6\5\1\243"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\7\5\1\u0119\17\5\7\0"+
    "\6\5\2\0\1\72\1\5\1\253\1\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\373\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\u011a\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\3\5\1\253\3\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\1\5\1\u011b\25\5\7\0\6\5\2\0\1\72"+
    "\1\u011c\2\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\6\5\1\u011d\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\1\u011e\2\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\1\5\1\u011f\1\5\1\u0120\23\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\u0121\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\4\5\1\u0122\13\5\1\123"+
    "\6\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\3\5\1\u0123\3\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\u0124\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\1\u0125\2\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\3\5"+
    "\1\u0126\23\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\5\5\1\u0127\1\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\4\5"+
    "\1\u0128\2\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\u0129\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\u012a\6\0\7\5"+
    "\1\0\1\u012b\1\5\1\u012c\24\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\6\5\1\u012d\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\6\5\1\u012e\20\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\6\5\1\u012f\20\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\1\5\1\u0130\1\5\1\u0131\3\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\7\5\1\u0132\17\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\20\5\1\123\6\5\7\0\6\5\2\0\1\72"+
    "\1\u0133\2\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\6\5\1\u0134\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\5\5\1\u0135\1\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\u0136"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\6\5\1\345\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\7\5\1\345\17\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\5\5\1\u0137\1\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\6\5\1\u0138\20\5\7\0"+
    "\1\5\1\u0139\4\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\1\5\1\u013a\4\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\2\5\1\132\24\5\43\0\1\u013b"+
    "\104\0\1\u013c\61\0\1\355\76\0\1\u013d\111\0\1\u013e"+
    "\104\0\1\u013f\61\0\1\361\76\0\1\u0140\57\0\4\u0141"+
    "\5\0\1\u0141\7\0\1\u0141\12\0\1\u0141\4\0\1\u0141"+
    "\2\0\1\u0141\1\0\1\u0141\1\0\2\u0141\7\0\2\u0141"+
    "\12\0\3\226\4\u0142\1\77\1\0\3\226\1\u0142\7\226"+
    "\1\u0142\12\226\1\u0142\4\226\1\u0142\2\226\1\u0142\1\226"+
    "\1\u0142\1\226\2\u0142\7\226\2\u0142\12\226\1\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\17\5\1\123\7\5\7\0\6\5\2\0\1\72\1\266"+
    "\2\5\7\0\1\5\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\2\5\1\u0143\24\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\4\5\1\u0144"+
    "\22\5\7\0\6\5\2\0\1\72\1\u0145\2\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\1\5\1\247\1\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\1\u0146\2\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\20\5\1\47\4\5\1\u0147\1\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\3\5\1\u0148\3\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\2\5\1\u0149\4\5\1\0\2\5\1\u014a"+
    "\24\5\7\0\6\5\2\0\1\72\1\u014b\2\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\3\5"+
    "\1\u014c\23\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\366\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\251\6\0\1\5\1\u014d\5\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\5\5\1\u014e\1\5\1\0\3\5\1\u014f"+
    "\23\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\3\5\1\u0150\3\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\1\5\1\u0151\1\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\4\5\1\u0152\22\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\4\5\1\u0153\2\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\1\5\1\u0154\5\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\2\5\1\u0155\4\5\1\0\27\5\7\0"+
    "\1\5\1\u0156\4\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\2\5\1\123"+
    "\24\5\7\0\1\5\1\u0157\4\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\1\5\1\u0158\1\5\7\0\1\u0159\6\0"+
    "\7\5\1\0\20\5\1\47\6\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\1\5\1\u015a\5\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\2\5\1\u015b\24\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\17\5\1\u015c\7\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\6\5\1\u015d"+
    "\20\5\7\0\6\5\2\0\1\72\1\u015e\2\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\5\5\1\u014e\1\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\u015f\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\1\5\1\u0160\5\5"+
    "\1\0\27\5\7\0\1\5\1\u0161\4\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\u0162\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\1\5\1\u0163\25\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\2\5\1\u0164\24\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\7\5\1\u0165"+
    "\17\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\2\5\1\267\24\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\1\5\1\u011e\25\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\6\5\1\266\20\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\2\5\1\123\4\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\25\5"+
    "\1\266\1\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\2\5\1\u0166\24\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\3\5\1\u0167\23\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\u0168\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\1\5\1\u0169\1\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\13\5\1\123"+
    "\13\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\20\5\1\260\6\5\7\0\6\5"+
    "\2\0\1\72\1\5\1\243\1\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\u016a\6\0\7\5\1\0\27\5\7\0\1\5"+
    "\1\u016b\4\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\17\5\1\u016c\7\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\2\5\1\u016d\24\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\115\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\5\5\1\u016e\1\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\20\5"+
    "\1\u016f\6\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\1\143\6\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\5\5\1\u0170"+
    "\1\5\1\0\1\5\1\u0171\25\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\1\5\1\u0172\5\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\3\5\1\u0173\23\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\6\5"+
    "\1\u0174\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\u0175\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\7\5\1\u0176\17\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\13\5\1\u0177\13\5"+
    "\7\0\6\5\2\0\1\72\1\5\1\u0178\1\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\3\5"+
    "\1\u0179\23\5\7\0\6\5\2\0\1\72\1\u017a\2\5"+
    "\7\0\1\5\6\0\7\5\1\0\7\5\1\u017b\17\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\1\5\1\u017c\5\5\1\0\27\5\44\0\1\355\3\0"+
    "\1\u013c\56\0\1\u017d\57\0\1\u013d\1\u017e\4\u013d\1\u017e"+
    "\2\0\3\u013d\2\0\1\u017e\1\0\1\u013d\2\u017e\1\u013d"+
    "\1\u017e\1\0\4\u017e\7\u013d\1\u017e\27\u013d\3\u017e\41\0"+
    "\1\361\3\0\1\u013f\56\0\1\u017f\57\0\1\u0140\1\u0180"+
    "\4\u0140\1\u0180\2\0\3\u0140\2\0\1\u0180\1\0\1\u0140"+
    "\2\u0180\1\u0140\1\u0180\1\0\4\u0180\7\u0140\1\u0180\27\u0140"+
    "\3\u0180\6\0\4\u0181\5\0\1\u0181\7\0\1\u0181\12\0"+
    "\1\u0181\4\0\1\u0181\2\0\1\u0181\1\0\1\u0181\1\0"+
    "\2\u0181\7\0\2\u0181\12\0\3\226\4\u0182\1\77\1\0"+
    "\3\226\1\u0182\7\226\1\u0182\12\226\1\u0182\4\226\1\u0182"+
    "\2\226\1\u0182\1\226\1\u0182\1\226\2\u0182\7\226\2\u0182"+
    "\12\226\1\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\5\5\1\u0183\1\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\u0184\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\1\5\1\266\5\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\4\5\1\u0165\22\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\1\5\1\u0185\25\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\2\5\1\u0186\4\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\2\5\1\u0187\4\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\5\5\1\123\1\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\7\5\1\u0188\17\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\3\5\1\u0189"+
    "\23\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\2\5\1\u012d\24\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\3\5\1\251"+
    "\3\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\1\u0187\26\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\3\5\1\267\23\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\5\5\1\u018a\1\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\u018b"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\6\5\1\266\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\3\5\1\u018c\3\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\1\5\1\u018d\5\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\1\u012b\1\5\1\u012c\24\5"+
    "\7\0\6\5\2\0\1\72\1\u018e\2\5\7\0\1\5"+
    "\6\0\1\u0102\6\5\1\0\24\5\1\u0105\2\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\u018f\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\1\5\1\u0190\25\5\7\0"+
    "\1\5\1\u0191\4\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\1\5\1\u0192\5\5\1\0"+
    "\27\5\7\0\1\5\1\u0193\4\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\151\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\1\5\1\u0194\1\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\4\5\1\u0195"+
    "\2\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\5\5\1\u0196\1\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\3\5\1\u0197\3\5\1\0\6\5\1\u0198\11\5\1\47"+
    "\6\5\7\0\6\5\2\0\1\72\1\5\1\u0199\1\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\6\5\1\u019a\20\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\1\5\1\143\5\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\u019b\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\3\5\1\266\3\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\7\5\1\u019c\17\5\7\0\1\5\1\u019d"+
    "\4\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\25\5\1\123\1\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\2\5\1\u019e\24\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\5\5\1\u019f\1\5\1\0"+
    "\7\5\1\151\17\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\5\5\1\u01a0\1\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\5\5\1\u0145\1\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\1\5\1\u0125\1\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\1\5\1\u01a1\4\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\1\5\1\367\1\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\5\5\1\u01a2\1\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\1\5\1\u01a3\25\5\7\0\6\5"+
    "\2\0\1\72\1\5\1\u019b\1\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\u01a4\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\1\5\1\u01a5\25\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\1\5\1\344\25\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\u01a6\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\13\5\1\345\13\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\4\5\1\266\22\5\7\0\6\5\2\0"+
    "\1\72\1\5\1\u01a7\1\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\3\5\1\u01a8\23\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\5\5\1\u01a9\21\5\27\0\1\u013d\77\0\1\u0140"+
    "\61\0\4\5\5\0\1\5\7\0\1\5\12\0\1\5"+
    "\4\0\1\5\2\0\1\5\1\0\1\5\1\0\2\5"+
    "\7\0\2\5\12\0\3\226\4\76\1\77\1\0\3\226"+
    "\1\76\7\226\1\76\12\226\1\76\4\226\1\76\2\226"+
    "\1\76\1\226\1\76\1\226\2\76\7\226\2\76\12\226"+
    "\1\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\6\5\1\u01aa\20\5\7\0\1\5\1\u01ab"+
    "\4\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\6\5\1\367\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\3\5\1\u0166\23\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\u010c\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\2\5\1\u0187\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\6\5\1\u01ac\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\23\5\1\266\3\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\4\5\1\u01ad\2\5\1\0\27\5"+
    "\7\0\1\5\1\u01ae\4\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\27\5\7\0\1\5\1\u01af"+
    "\4\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\2\5\1\u014a\24\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\17\5\1\251\7\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\6\5\1\u01b0"+
    "\20\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\4\5\1\u01b1\2\5\1\0\27\5\7\0\1\5"+
    "\1\u01b2\4\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\3\5\1\u01b3\23\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\6\5\1\u01b4\20\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\5\5\1\u01b5\1\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\1\5\1\132\5\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\1\u01b6\2\5\7\0\1\5\6\0"+
    "\1\5\1\130\5\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\3\5"+
    "\1\u01b7\23\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\1\5\1\353\5\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\2\5\1\277\24\5\7\0\1\5\1\u01b8\4\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\27\5\7\0\1\5\1\u01b9\4\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\u01ba\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\3\5\1\277\3\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\3\5\1\u01bb"+
    "\3\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\3\5\1\u01bc\3\5\1\0\1\5"+
    "\1\u01bd\25\5\7\0\6\5\2\0\1\72\1\5\1\151"+
    "\1\5\7\0\1\5\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\1\5\1\u01bb\1\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\1\5\1\u01be\4\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\1\5\1\345\1\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\2\5\1\345\24\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\7\5\1\u017b\17\5"+
    "\7\0\6\5\2\0\1\72\1\261\2\5\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\2\5\1\266\4\5\1\0"+
    "\27\5\7\0\1\5\1\u01bf\4\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\2\5\1\u01c0\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\u01c1\6\0\7\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\1\5"+
    "\1\u01c2\25\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\7\5\1\0\1\u01c3\26\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\2\5\1\u01c4"+
    "\3\5\1\u01c5\1\0\1\5\1\u01c6\1\u01c7\24\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\3\5\1\u01c8\23\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\7\5\1\0\1\5\1\251"+
    "\25\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\4\5\1\123\2\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\1\5\1\u01c9"+
    "\5\5\1\0\27\5\7\0\6\5\2\0\1\72\1\5"+
    "\1\u01ca\1\5\7\0\1\5\6\0\7\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\2\5\1\u01cb\7\0\1\5"+
    "\6\0\7\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\2\5\1\132\4\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\20\5\1\47\6\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\3\5\1\u01cc"+
    "\3\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\2\5\1\u01cd\24\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\1\5\1\151\5\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\5\5"+
    "\1\u01ce\21\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\4\5\1\u01cf\2\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\2\5"+
    "\1\u01c4\2\5\1\u01d0\1\u01c5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\4\5\1\u01d1\22\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\21\5\1\u01d2\5\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\1\5\1\267\25\5\7\0\6\5\2\0"+
    "\1\72\1\u01d3\2\5\7\0\1\5\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\5\5\1\u01d4\1\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\1\5\1\u01d4\25\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\3\5\1\115\23\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\2\5\1\u01d5\24\5\7\0\6\5\2\0"+
    "\1\72\1\267\2\5\7\0\1\5\6\0\7\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\2\5\1\255\24\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\5\5\1\u0150"+
    "\1\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\247\6\0\7\5\1\0\27\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\3\5\1\u01d6"+
    "\3\5\1\0\27\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\1\5\1\u014d\5\5\1\0\27\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\7\5\1\0\2\5\1\272\24\5\7\0\6\5\2\0"+
    "\1\72\1\5\1\u01d7\1\5\7\0\1\5\6\0\7\5"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\1\5\1\u0187\5\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\7\5\1\u01d8\17\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\5\5\1\u01d9\1\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\22\5\1\123\4\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\6\5\1\251"+
    "\1\0\27\5\7\0\6\5\2\0\1\72\3\5\7\0"+
    "\1\5\6\0\1\5\1\u01b0\5\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\7\5"+
    "\1\0\13\5\1\151\13\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\251\6\0\7\5\1\0\27\5\7\0"+
    "\6\5\2\0\1\72\3\5\7\0\1\5\6\0\1\5"+
    "\1\u01da\5\5\1\0\27\5\7\0\6\5\2\0\1\72"+
    "\3\5\7\0\1\5\6\0\2\5\1\u01db\4\5\1\0"+
    "\27\5\7\0\6\5\2\0\1\72\3\5\7\0\1\5"+
    "\6\0\7\5\1\0\13\5\1\u01dc\13\5\7\0\6\5"+
    "\2\0\1\72\3\5\7\0\1\5\6\0\7\5\1\0"+
    "\1\5\1\366\25\5\7\0\6\5\2\0\1\72\3\5"+
    "\7\0\1\5\6\0\7\5\1\0\3\5\1\u01dd\23\5"+
    "\7\0\6\5\2\0\1\72\3\5\7\0\1\5\6\0"+
    "\5\5\1\u01bb\1\5\1\0\27\5\7\0\6\5\2\0"+
    "\1\72\3\5\7\0\1\5\6\0\7\5\1\0\2\5"+
    "\1\251\24\5\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29312];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\2\11\7\1\1\11\36\1\1\11"+
    "\5\1\1\11\3\1\1\0\1\1\1\0\2\1\1\11"+
    "\1\0\6\1\2\11\101\1\1\11\11\0\1\1\1\0"+
    "\1\1\1\11\124\1\11\0\106\1\2\0\1\1\2\0"+
    "\1\1\1\0\73\1\5\0\134\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public QDLSyntax() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QDLSyntax(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QDLSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 266) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 23: break;
        case 19: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 24: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 25: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 27: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 28: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 29: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 30: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 31: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 32: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 33: break;
        case 6: 
          { addToken(Token.FUNCTION);
          }
        case 34: break;
        case 20: 
          { addToken(Token.DATA_TYPE);
          }
        case 35: break;
        case 18: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 36: break;
        case 13: 
          { addToken(Token.ERROR_CHAR);
          }
        case 37: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 38: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 39: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 42: break;
        case 9: 
          { 
          }
        case 43: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 478: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 479: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 480: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
