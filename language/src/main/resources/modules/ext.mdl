module[
   'qdl:/extensions','ext'
]body[
   » This module defines several additional functions for mathematics
   » These include sec(), sech() etc.
   »    clone(arg.) - make a complete copy of a stem
   »    fork(@monad0, @dyad, @monad1, arg) - evaluate dyad(monad0(arg),monad1(arg))
   »    n_copy(s,n) - make a stem with n copies of the argument s
   »    to_csv(arg.)- export a stem to comma separated format.
   »    
   » Mostly this is for very useful functions (like ravel) that are way easier
   » to write in QDL than anything else.

    define[clone(arg)][
        » clone(arg.) - Returns a completely new copy of the stem.
        » Since generally stems are by reference, not value,  something like
        » a. := b.
        » a.0 := 42
        » sets element 42 in b. as well. To have them independent, use this
        » If arg is not a stem, it is simply returned since all other references
        » are by value.
        if[var_type(arg) != constants('var_type').'stem'][return(arg);];
        return(from_json(to_json(arg)));
   ];

   define[n_copy(s, n)][
     » n_copy(s,n) - Create a stem with 0 < n copies of the single argument s.
     out. := null;
     if[n <= 0][return([]);];
     while[for_next(__j, [;n])][out.__j := s;];
     return(out.);
   ];


   define[ jfork(⊗monad1,⊗dyad,⊗monad2,x.)][
     » jfork(⊗monad1,⊗dyad,⊗monad2,x.) - apply a fork to a stem.
     » A fork (in J) is defined as a taking a dyad and two monads and applying them to an argument
     »    dyad(monad1(x.), monad2(x.)
     » A surprisingly large number of problems are addressed by this: transform the argument
     » then use both results for something else. For instance
     » to compute the average of a set of numbers, define
     »    sum(x.)->reduce(@+, x.);
     » then the average of the first 10 odd numbers is
     »    jfork(@sum(), @/, @size(), 1+2*n(10));
     » So "sum divided by size" is how to read this.
     » Note the dyad (any algebraic operation like addition is a dyad) is put
     » in the middle of the argument list so it looks any other operator.
     return(dyad(monad1(x.),monad2(x.)));
   ];

   define[
      to_csv(arg.)
    ][
      » to_csv(arg.) - Convert a stem., arg., to csv (comma separated values) format.
      » arg. is the stem to be converted. Each element is a list and will be a line
      » in the output. The zero-th element of arg. should be the headers you want.
      » A typical use is
      »     file_write(my_file, to_csv(data.));
      » E.g. here is the start of one.
      »
      »     arg.0 := ['t', 'x', 'y']; // header
      »     arg.1 := [12.3, -0.3, 2.2]; // first line of data, etc.
      » tip:  [['t', 'x','y']]~arg. would add the headers to arg..
      // convert each entry and remove the [] so its just numbers
      z. := for_each(@to_string(), a.) - ']' - '[';
      return(z.);
   ]; //end to_cvs

   define[
       ravel(q)
   ][
      » ravel(q) - turn any stem (of any dimension) into a list of values.
      » This always returns a simple list. If you supply a scalar, that will be
      » returned in a list too. This is different that getting the unique values
      » in that each value in order is preserved.
      » One use is 'pouring' one set of values into another shape
      » E.g.
      »     q. := n(2,6,[;12]);
      »     n(3,2,2, ravel(q.))
      » [
      »    [[0,1],[2,3]],
      »    [[4,5],[6,7]],
      »    [[8,9],[10,11]]
      »  ]
      »
      » E.g.
      »     ravel(n(2,3,2,3,[;2*3*2*3]))
      »    [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
      »        21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]
      if[var_type(q) != constants().var_type.stem][return([q]);];
      if[rank(q)==1][return(q);];
      return(remap(q, indices(q)));
   ]; // end ravel

  define[
      laminate(x, y)
   ][
     » laminate(x, y) - Laminate along zero-th axis. See help for laminate(x,y,axis).
      return(laminate(x,y,0));
   ];
    //  laminate(n(2,3,[;6]),n(2,3,[10;16]),0)
  /*
      laminate should be a base function, however it's an example of something
      straightforward to write in QDL
      and darned near impossible to write in Java.
  */
  define[
      laminate(x, y, axis)
   ][
     » laminate(x, y, axis) - paste two stems together along an axis
     » At least one of x and y is a stem. This works best for rectangular arrays.
      types ≔ (var_type(x) ≡ 4?1:0) + (var_type(y) ≡ 4?2:0);
      // 0 - both scalars, 1 - x only stem, 2 - y only stem 3 - both stems
      if[types ≡ 0][return([x,y]);]; // trivial case
      left. ≔ []; right. ≔ [];
      l_dim. ≔ []; r_dim.≔ [];
      switch[
          if[types ≡ 1][left.≔x; l_dim.≔ dim(x);r_dim.≔clone(l_dim.);right.≔n(r_dim., [y]);];
          if[types ≡ 2][right.≔y;r_dim.≔dim(y);l_dim.≔clone(r_dim.);left.≔n(l_dim., [x]);];
          if[types ≡ 3][left.≔x;right.≔y;l_dim.≔dim(x);r_dim.≔dim(y);];
      ]; // end switch
      size(left.) ≡ 0 ⇒ return(right.);
      size(right.) ≡ 0 ⇒ return(left.);
      // one may be one rank high if they are conformable
      l_rank ≔ size(l_dim.); r_rank ≔ size(r_dim.);
      ⊨ abs(l_rank - r_rank) ≤ 1 : 'rank error';
      axis ≔ axis<0?axis+min(l_rank, r_rank)+1:axis; // axis <0 ok, but count against l_rank
      ⊨ (0 ≤ axis) ∧ (axis ≤ min(l_rank, r_rank)) : 'axis error';
      // Next function augments the rank of the argument(s)
      aug(δ., α)->(size(δ.) ≡ α)?δ.~1:insert_at([1],0,1,δ., α);
      if[r_rank ≡ l_rank][l_dim. ≔ aug(l_dim., axis);r_dim. ≔ aug(r_dim., axis);];
      if[l_rank < r_rank][l_dim. ≔ aug(l_dim., axis);];
      if[r_rank < l_rank][r_dim. ≔ aug(r_dim., axis);];
      // Final conformability check. All but the axis of the join must match
      v. ≔ l_dim. ≡ r_dim.;
      v.axis ≔ true; // set test for axis of join true so this passes if the others match
      ⊨ reduce(⊗∧, v.) : 'ranks not conformable';
      return(join(n(l_dim., ravel(left.)), n(r_dim., ravel(right.)), axis));
   ]; // end laminate

    define[
      m_set(x., y., z)
      ][
       » m_set(x.,keys.,values | values.) sets multiple values in the stem x.
       »   keys. - a list of multi-indices.
       »   values - a  scalar or a lsit  of values
       »            in 1-1 correspondence with keys.
       » So x.keys.k := z | values.k
       » depending on if z is a scalar or a stem.
       » E.g. Set selected values of a 5x5 array to -1
       »     a. := n(5,5,n(25));
       »     m_set(a., [[0,0],[1,1],[2,2],[3,3],[4,4]], -1)
       »     a.
       » [[-1,1,2,3,4],[5,-1,7,8,9],[10,11,-1,13,14],[15,16,17,-1,19],[20,21,22,23,-1]]
       »     m_set(a., [[0,0],[1,1],[2,2],[3,3],[4,4]], ['a','b','c','d','e'])
       »     a.
       » [[a,1,2,3,4],[5,b,7,8,9],[10,11,c,13,14],[15,16,17,d,19],[20,21,22,23,e]]
       » See also, m_indices
        zz. := var_type(z)==4?z:n(size(y.),[z]);
        while[
           k∈[;size(y.)]
        ][
           x.y.k :=zz.k;
        ];//end while
        return(x.);
      ];

    define[
      m_indices(x,y)
      ][
       » m_indices(x,y) creates a multi-index.
       » x - a scalar or simple list of indices
       » y - a scalar or simple list of indices
       » output is the list of indices consisting of all pairs
       » from x and y.
       » E.g.
       »     m_indices([2;5],'id')
       » [[2,id],[3,id],[4,id]]
       » This is immensely useful with functions like remap.
       » E.g. Extract a 2x2 array from a. with elements
       » [
       »    [a.2.3, a.2.5],
       »    [a.4.3, a.4.5]
       » ]
       » using remap and m_indices.
       »     a. := n(5,7,[;35]); //populate a.
       »     remap(a.,m_indices([2,4],[3,5]),m_indices([;2],[;2]));
       » [
       »   [17,19],
       »   [31,33]
       »  ]
       xx. := var_type(x)==4?x:[x];
       yy. := (var_type(y)==4)?y:[y];
       return(reduce(@~, for_each(@~,xx.,yy.)));
      ]; // end m_indices

   define[
      m_indices(x.)
      ][
       » m_indices(x.) create a multi-index using each element in x.
       » x. - a stem of either simple lists or scalars
       » output is the multi-index. Note size(x.) determines the rank
       » of the resulting multi-index.
       » This is equivalent to
       » m_indices(x.n,m_indices(x.(n-1),...,m_indices(x.0,x.1)))
       » E.g.
       »     m_indices([[;3],'foo',[4,7]])
       » [
       »    [0,foo,4],
       »    [0,foo,7],
       »    [1,foo,4],
       »    [1,foo,7],
       »    [2,foo,4],
       »    [2,foo,7]
       »  ]
       » Since x. had size 3, these are 3-indices.
       ⊨ 1<size(x.) : 'm_indices requires its argument to have at least 2 elements.';
       r. :=m_indices(x.0,x.1); // applies ~ to the outer product
       while[
            for_next(k, size(x.),2)
        ][
          // r.:=m_indices(r., x.k);
           n:=0;
           s.:=null;
           w.:=x.k;
           say('r.' + r.);
           say('w.:' + w.);
           while[i∋r.]
                [while[j∋w.]
                      [
                        s.(n++):=(r.i)~(w.j);
                      ]; // end j loop
                ]; //end i loop
            r.:=s.;
        ]; // end k loop
        return(r.);
      ]; // end m_indices
       /*
       n:=0;
       s.:=null;
       while[i∋z.]
            [while[j∋w.]
                  [
                    s.(n++):=z.i~w.j;
                  ];
            ];
       */

      define[to_uuid(x)]
      body[
      === convert a string to a uuid by creating the md5 hash first.
          return(to_uuid(x, 'md5'));
      ];
      define[to_uuid(x,algorithm)]
      body[
            === to_uuid(x,algorithm_name) - convert a string,x, to a uuid by creating the given  hash algorithm.
            === x may also be a stem of strings and each will be converted.
            === NOTE that this will be a uuid so that if the hash has more than the number of characters,
            === it will be truncated. md5 and md2 always have the right length.
            if[var_type(x) == 4]
            then[
            h. := hash(x, algorithm);
             return(substring(h.,0,8)+'-'+substring(h.,8,4) + '-' + substring(h.,12,4)+'-' + substring(h.,16,4) + '-' + substring(h.,20,12));
             ];

            h := hash(x, algorithm);
            return(substring(h,0,8)+'-'+substring(h,8,4) + '-' + substring(h,12,4)+'-' + substring(h,16,4) + '-' + substring(h,20,12));
          ];
]; // end module
