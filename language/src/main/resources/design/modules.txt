11/20/2023
Redesign of modules.

Modules are supposed to be the encapsulation mechanism in QDL as well as offering
namespace control. They are, however, treated as different and should instead
be first class objects, assignable to variables, passable as arguments to functions
etc.

Current Machinery
-----------------
The current machinery consists of a Module class and some machinery for importing
them. They are in XThings that are extended as MIWrappers. We can use these as is
but put them into the VStack.

ModuleEvaluator
---------------
A new Evaluator class that handles modules. Modules are assignable to variables and
are treated like any other value. We propose the following functions to handle this

Namespace and instance management:

* load(path{,URI}) - load a module by FS or class path. Optionally re-assign the URI.
           This will read the module and make it available for instantiation. These
           currently reside in templates

* var := import(URI) - create a new instance of the module and assign it to var.

* use(URI{,list}) - read the module into the current scope so not NS qualifications
           are needed. An optional list of variables, functions and modules(??)
           allows for partial import.
           E.g. use('qdl:/extension/complex', [{sum, 2},{exp, 2}])

* drop(URI) - remove the template/module from the workspace.

* rename_uri(old_uri, new_uri) - rename an existing template's URI to from old_uri
           to new_uri.

Interrogatives:

* funcs(var | URI) - list the functions in a module or instance thereof
* vars(var | URI)  - list the variables in a module or instance thereof
* docs(var | URI) - read the module documentation (as a stem of strings).

URIs are at this point not types in their own right (though they could be).
We also need a consistent way of describing functions and arguments. A list
of the form [name, argCount] would do it, but that seems like it won't scale.